#!/usr/bin/env python3
"""
–†–µ–≥—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç QR –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')

from app.utils.pdf_analyzer import PDFAnalyzer
from app.core.config import settings
import structlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

def test_coordinate_regression():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    
    # –°–æ–∑–¥–∞–µ–º PDFAnalyzer
    pdf_analyzer = PDFAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    test_cases = [
        {
            "file": "/app/test_pdfs/A4_portrait_0deg.pdf",
            "expected": {"x": 500.8, "y": 12.0},  # bottom-right —Å margin 12pt
            "description": "A4 Portrait 0¬∞"
        },
        {
            "file": "/app/test_pdfs/A4_portrait_90deg.pdf",
            "expected": {"x": 12.0, "y": 500.8},  # –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ 90¬∞
            "description": "A4 Portrait 90¬∞"
        },
        {
            "file": "/app/test_pdfs/A4_portrait_180deg.pdf",
            "expected": {"x": 12.0, "y": 680.8},  # –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ 180¬∞
            "description": "A4 Portrait 180¬∞"
        },
        {
            "file": "/app/test_pdfs/A4_portrait_270deg.pdf",
            "expected": {"x": 680.8, "y": 12.0},  # –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ 270¬∞
            "description": "A4 Portrait 270¬∞"
        },
        {
            "file": "/app/test_pdfs/A3_landscape_0deg.pdf",
            "expected": {"x": 1063.8, "y": 12.0},  # A3 landscape bottom-right
            "description": "A3 Landscape 0¬∞"
        },
        {
            "file": "/app/test_pdfs/A3_landscape_90deg.pdf",
            "expected": {"x": 12.0, "y": 1063.8},  # A3 landscape –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ 90¬∞
            "description": "A3 Landscape 90¬∞"
        }
    ]
    
    results = []
    passed_tests = 0
    total_tests = len(test_cases)
    
    for i, test_case in enumerate(test_cases):
        logger.info(f"üîç –¢–µ—Å—Ç {i+1}/{total_tests}: {test_case['description']}")
        
        if not os.path.exists(test_case["file"]):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_case['file']}")
            results.append({
                "test": test_case["description"],
                "status": "FAILED",
                "error": "File not found"
            })
            continue
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF
            layout_info = pdf_analyzer.analyze_page_layout(test_case["file"], 0)
            
            if not layout_info:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {test_case['file']}")
                results.append({
                    "test": test_case["description"],
                    "status": "FAILED",
                    "error": "Layout analysis failed"
                })
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            coordinate_info = layout_info.get("coordinate_info", {})
            page_box = {
                "width": layout_info["page_width"],
                "height": layout_info["page_height"]
            }
            rotation = layout_info["rotation"]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é QR –∫–æ–¥–∞
            qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
            x, y = pdf_analyzer.compute_qr_anchor(
                page_box=page_box,
                qr_size=qr_size,
                rotation=rotation
            )
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            expected = test_case["expected"]
            tolerance = 1.0  # –î–æ–ø—É—Å–∫ ¬±1 pt
            
            x_diff = abs(x - expected["x"])
            y_diff = abs(y - expected["y"])
            
            if x_diff <= tolerance and y_diff <= tolerance:
                logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test_case['description']}")
                logger.info(f"   –û–∂–∏–¥–∞–µ–º–æ: ({expected['x']}, {expected['y']})")
                logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ: ({x:.1f}, {y:.1f})")
                logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞: ({x_diff:.1f}, {y_diff:.1f})")
                
                results.append({
                    "test": test_case["description"],
                    "status": "PASSED",
                    "expected": expected,
                    "actual": {"x": x, "y": y},
                    "difference": {"x": x_diff, "y": y_diff}
                })
                passed_tests += 1
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {test_case['description']}")
                logger.error(f"   –û–∂–∏–¥–∞–µ–º–æ: ({expected['x']}, {expected['y']})")
                logger.error(f"   –ü–æ–ª—É—á–µ–Ω–æ: ({x:.1f}, {y:.1f})")
                logger.error(f"   –†–∞–∑–Ω–∏—Ü–∞: ({x_diff:.1f}, {y_diff:.1f})")
                
                results.append({
                    "test": test_case["description"],
                    "status": "FAILED",
                    "expected": expected,
                    "actual": {"x": x, "y": y},
                    "difference": {"x": x_diff, "y": y_diff}
                })
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test_case['description']}", error=str(e))
            results.append({
                "test": test_case["description"],
                "status": "FAILED",
                "error": str(e)
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = "/app/test_results/coordinate_regression_results.json"
    os.makedirs(os.path.dirname(results_file), exist_ok=True)
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": total_tests - passed_tests,
                "success_rate": f"{(passed_tests/total_tests)*100:.1f}%"
            },
            "results": results
        }, f, indent=2, ensure_ascii=False)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ì–†–ï–°–°-–¢–ï–°–¢–û–í")
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    return passed_tests == total_tests

def test_anchor_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —è–∫–æ—Ä—è –¥–ª—è –æ–¥–Ω–æ–≥–æ PDF"""
    
    logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π")
    
    pdf_analyzer = PDFAnalyzer()
    test_file = "/app/test_pdfs/A4_portrait_0deg.pdf"
    
    if not os.path.exists(test_file):
        logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF
    layout_info = pdf_analyzer.analyze_page_layout(test_file, 0)
    if not layout_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF")
        return False
    
    page_box = {
        "width": layout_info["page_width"],
        "height": layout_info["page_height"]
    }
    rotation = layout_info["rotation"]
    qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∫–æ—Ä—è
    anchors = ["bottom-right", "bottom-left", "top-right", "top-left"]
    
    logger.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π:")
    logger.info(f"{'–Ø–∫–æ—Ä—å':<15} {'X (pt)':<10} {'Y (pt)':<10} {'X (—Å–º)':<10} {'Y (—Å–º)':<10}")
    logger.info("-" * 60)
    
    for anchor in anchors:
        x, y = pdf_analyzer.compute_qr_anchor(
            page_box=page_box,
            qr_size=qr_size,
            anchor=anchor,
            rotation=rotation
        )
        
        logger.info(f"{anchor:<15} {x:<10.1f} {y:<10.1f} {x/28.35:<10.2f} {y/28.35:<10.2f}")
    
    return True

def test_rotation_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ PDF"""
    
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤")
    
    pdf_analyzer = PDFAnalyzer()
    test_file = "/app/test_pdfs/A4_portrait_0deg.pdf"
    
    if not os.path.exists(test_file):
        logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF
    layout_info = pdf_analyzer.analyze_page_layout(test_file, 0)
    if not layout_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF")
        return False
    
    page_box = {
        "width": layout_info["page_width"],
        "height": layout_info["page_height"]
    }
    qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã
    rotations = [0, 90, 180, 270]
    
    logger.info("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ (bottom-right —è–∫–æ—Ä—å):")
    logger.info(f"{'–ü–æ–≤–æ—Ä–æ—Ç':<10} {'X (pt)':<10} {'Y (pt)':<10} {'X (—Å–º)':<10} {'Y (—Å–º)':<10}")
    logger.info("-" * 60)
    
    for rotation in rotations:
        x, y = pdf_analyzer.compute_qr_anchor(
            page_box=page_box,
            qr_size=qr_size,
            rotation=rotation
        )
        
        logger.info(f"{rotation}¬∞{'':<6} {x:<10.1f} {y:<10.1f} {x/28.35:<10.2f} {y/28.35:<10.2f}")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç QR –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_dir = "/app/test_pdfs"
    if not os.path.exists(test_dir):
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_dir}")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python generate_test_pdfs.py")
        return 1
    
    success = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
    success &= test_coordinate_regression()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∫–æ—Ä—è
    success &= test_anchor_variations()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã
    success &= test_rotation_variations()
    
    if success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
