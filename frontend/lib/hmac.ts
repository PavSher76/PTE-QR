/**
 * HMAC signature utilities for QR URL validation
 * Note: This is a simplified version for frontend validation
 * The actual HMAC verification should be done on the backend
 */

/**
 * Verify HMAC signature (simplified frontend validation)
 * This is mainly for basic format validation
 * Real HMAC verification should be done on the backend
 */
export function verifyHMACSignature(
  docUid: string,
  revision: string,
  page: number,
  timestamp: number,
  signature: string
): boolean {
  // Basic validation
  if (!docUid || !revision || !page || !timestamp || !signature) {
    return false;
  }

  // Check if timestamp is not too old (24 hours)
  const now = Math.floor(Date.now() / 1000);
  const maxAge = 24 * 60 * 60; // 24 hours in seconds
  
  if (now - timestamp > maxAge) {
    return false;
  }

  // Check signature format (basic validation)
  if (signature.length < 10) {
    return false;
  }

  // For testing purposes, accept test signatures
  if (signature.startsWith('test_signature_')) {
    return true;
  }

  // In a real implementation, you would verify the HMAC signature here
  // using the same secret key as the backend
  // For security reasons, this should be done on the backend only
  
  return true;
}

/**
 * Generate test HMAC signature for development
 * This should only be used in development/testing
 */
export function generateTestSignature(
  docUid: string,
  revision: string,
  page: number,
  timestamp: number
): string {
  // This is a mock signature for testing
  // In production, this should be generated by the backend
  return `test_signature_${timestamp}_${docUid}_${revision}_${page}`;
}

/**
 * Check if signature is a test signature
 */
export function isTestSignature(signature: string): boolean {
  return signature.startsWith('test_signature_');
}
