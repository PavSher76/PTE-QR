#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã —Å –æ–ø—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ –Ω–∞ –ª–∏—Å—Ç–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ QR –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
"""

import sys
import os
import asyncio
import tempfile
from pathlib import Path
from typing import List, Tuple, Dict, Optional
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from app.core.logging import configure_logging
from app.services.pdf_service import PDFService
from app.services.qr_service import QRService
from app.utils.pdf_analyzer import PDFAnalyzer

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
import cv2
import numpy as np
from PIL import Image
import fitz  # PyMuPDF
import qrcode
from pyzbar import pyzbar
import io

class QROpticalRecognitionTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤"""
    
    def __init__(self):
        self.logger = configure_logging()
        self.pdf_service = PDFService()
        self.qr_service = QRService()
        self.pdf_analyzer = PDFAnalyzer()
        self.test_results = []
        
    def extract_qr_codes_from_pdf(self, pdf_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç QR –∫–æ–¥—ã –∏–∑ PDF —Å –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        qr_codes = []
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(pdf_path)
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                mat = fitz.Matrix(3.0, 3.0)  # 3x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                pix = page.get_pixmap(matrix=mat)
                img_data = pix.tobytes("png")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                pil_image = Image.open(io.BytesIO(img_data))
                img_array = np.array(pil_image)
                
                # –ò—â–µ–º QR –∫–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                detected_qrs = pyzbar.decode(img_array)
                
                for qr in detected_qrs:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ QR –∫–æ–¥–∞
                    rect = qr.rect
                    qr_data = qr.data.decode('utf-8')
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ç–æ—á–∫–∏ PDF (—É—á–∏—Ç—ã–≤–∞—è –º–∞—Å—à—Ç–∞–±)
                    scale_factor = 3.0
                    x_points = rect.left / scale_factor
                    y_points = rect.top / scale_factor
                    width_points = rect.width / scale_factor
                    height_points = rect.height / scale_factor
                    
                    qr_info = {
                        'page_number': page_num + 1,
                        'data': qr_data,
                        'x_points': x_points,
                        'y_points': y_points,
                        'width_points': width_points,
                        'height_points': height_points,
                        'x_cm': round(x_points / 28.35, 2),
                        'y_cm': round(y_points / 28.35, 2),
                        'width_cm': round(width_points / 28.35, 2),
                        'height_cm': round(height_points / 28.35, 2),
                        'quality': qr.quality,
                        'type': qr.type
                    }
                    
                    qr_codes.append(qr_info)
                    
                    print(f"üîç QR –∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}:")
                    print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: ({qr_info['x_cm']:.2f} —Å–º, {qr_info['y_cm']:.2f} —Å–º)")
                    print(f"   üìè –†–∞–∑–º–µ—Ä: {qr_info['width_cm']:.2f} √ó {qr_info['height_cm']:.2f} —Å–º")
                    print(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {qr_data[:50]}...")
                    print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {qr.quality}")
                    print()
            
            doc.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ QR –∫–æ–¥–æ–≤: {e}")
            
        return qr_codes
    
    def analyze_page_layout(self, pdf_path: str, page_number: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PDFAnalyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            with open(pdf_path, 'rb') as f:
                pdf_content = f.read()
            analysis_result = self.pdf_analyzer.analyze_page_layout(pdf_content, page_number)
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –º–∞–∫–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}:")
            print(f"   üñºÔ∏è  –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {'Landscape' if analysis_result.get('is_landscape') else 'Portrait'}")
            
            if analysis_result.get('stamp_top_edge'):
                print(f"   üìã –®—Ç–∞–º–ø: {analysis_result['stamp_top_edge']:.1f} —Ç–æ—á–µ–∫ –æ—Ç –Ω–∏–∑–∞ ({analysis_result['stamp_top_edge']/28.35:.2f} —Å–º)")
            
            if analysis_result.get('right_frame_edge'):
                print(f"   üìê –ü—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞: {analysis_result['right_frame_edge']:.1f} —Ç–æ—á–µ–∫ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è ({analysis_result['right_frame_edge']/28.35:.2f} —Å–º)")
                
            if analysis_result.get('bottom_frame_edge'):
                print(f"   üìê –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞: {analysis_result['bottom_frame_edge']:.1f} —Ç–æ—á–µ–∫ –æ—Ç –≤–µ—Ä—Ö–∞ ({analysis_result['bottom_frame_edge']/28.35:.2f} —Å–º)")
            
            print()
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞–∫–µ—Ç–∞: {e}")
            return {}
    
    def validate_qr_positioning(self, qr_codes: List[Dict], page_analysis: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤"""
        validation_results = {
            'total_qr_codes': len(qr_codes),
            'correctly_positioned': 0,
            'positioning_errors': [],
            'summary': {}
        }
        
        for qr in qr_codes:
            page_num = qr['page_number']
            qr_x = qr['x_points']
            qr_y = qr['y_points']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —à—Ç–∞–º–ø–∞
            if page_analysis.get('stamp_top_edge'):
                stamp_y = page_analysis['stamp_top_edge']
                expected_y = stamp_y + (0.5 * 28.35)  # 0.5 —Å–º –æ—Ç —à—Ç–∞–º–ø–∞
                
                # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±1 —Å–º
                tolerance = 1.0 * 28.35
                y_diff = abs(qr_y - expected_y)
                
                if y_diff <= tolerance:
                    validation_results['correctly_positioned'] += 1
                    print(f"‚úÖ QR –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: –ø–æ–∑–∏—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {y_diff/28.35:.2f} —Å–º)")
                else:
                    error = {
                        'page': page_num,
                        'expected_y_cm': expected_y / 28.35,
                        'actual_y_cm': qr_y / 28.35,
                        'deviation_cm': y_diff / 28.35,
                        'type': 'Y-positioning'
                    }
                    validation_results['positioning_errors'].append(error)
                    print(f"‚ùå QR –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è Y –ø–æ–∑–∏—Ü–∏—è (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {y_diff/28.35:.2f} —Å–º)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏
            if page_analysis.get('right_frame_edge'):
                frame_x = page_analysis['right_frame_edge']
                expected_x = frame_x - (1.0 * 28.35) - qr['width_points']  # 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏
                
                # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±1 —Å–º
                tolerance = 1.0 * 28.35
                x_diff = abs(qr_x - expected_x)
                
                if x_diff <= tolerance:
                    print(f"‚úÖ QR –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: X –ø–æ–∑–∏—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {x_diff/28.35:.2f} —Å–º)")
                else:
                    error = {
                        'page': page_num,
                        'expected_x_cm': expected_x / 28.35,
                        'actual_x_cm': qr_x / 28.35,
                        'deviation_cm': x_diff / 28.35,
                        'type': 'X-positioning'
                    }
                    validation_results['positioning_errors'].append(error)
                    print(f"‚ùå QR –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è X –ø–æ–∑–∏—Ü–∏—è (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {x_diff/28.35:.2f} —Å–º)")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        validation_results['summary'] = {
            'accuracy_percentage': (validation_results['correctly_positioned'] / max(validation_results['total_qr_codes'], 1)) * 100,
            'total_errors': len(validation_results['positioning_errors']),
            'y_errors': len([e for e in validation_results['positioning_errors'] if e['type'] == 'Y-positioning']),
            'x_errors': len([e for e in validation_results['positioning_errors'] if e['type'] == 'X-positioning'])
        }
        
        return validation_results
    
    def test_qr_generation_and_placement(self, test_document_path: str) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤")
        print("=" * 60)
        
        test_result = {
            'test_name': 'QR Optical Recognition Test',
            'timestamp': datetime.now().isoformat(),
            'input_document': test_document_path,
            'qr_codes_found': [],
            'page_analysis': {},
            'validation_results': {},
            'success': False
        }
        
        try:
            # 1. –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {test_document_path}")
            with open(test_document_path, 'rb') as f:
                original_pdf_content = f.read()
            
            print(f"   –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(original_pdf_content)} –±–∞–π—Ç")
            
            # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ PDF
            print("\nüîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ PDF...")
            result = asyncio.run(self.pdf_service.add_qr_codes_to_pdf(
                original_pdf_content,
                'OPTICAL-TEST',
                '0',
                '/tmp/optical_test.pdf'
            ))
            
            processed_pdf_content, qr_data_list = result
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ QR –∫–æ–¥–æ–≤: {len(qr_data_list)}")
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π PDF
            output_path = '/tmp/processed_optical_test.pdf'
            with open(output_path, 'wb') as f:
                f.write(processed_pdf_content)
            
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º QR –∫–æ–¥—ã —Å –ø–æ–º–æ—â—å—é –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            print("\nüîç –ò–∑–≤–ª–µ–∫–∞–µ–º QR –∫–æ–¥—ã —Å –ø–æ–º–æ—â—å—é –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            detected_qr_codes = self.extract_qr_codes_from_pdf(output_path)
            test_result['qr_codes_found'] = detected_qr_codes
            
            print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ QR –∫–æ–¥–æ–≤: {len(detected_qr_codes)}")
            
            # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü...")
            page_analysis = {}
            for qr in detected_qr_codes:
                page_num = qr['page_number']
                if page_num not in page_analysis:
                    analysis = self.analyze_page_layout(output_path, page_num - 1)  # 0-based index
                    page_analysis[page_num] = analysis
            
            test_result['page_analysis'] = page_analysis
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            validation_results = self.validate_qr_positioning(detected_qr_codes, page_analysis)
            test_result['validation_results'] = validation_results
            
            # 7. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("=" * 40)
            print(f"üìÑ –í—Å–µ–≥–æ QR –∫–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(detected_qr_codes)}")
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã: {validation_results['correctly_positioned']}")
            print(f"‚ùå –û—à–∏–±–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(validation_results['positioning_errors'])}")
            print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {validation_results['summary']['accuracy_percentage']:.1f}%")
            
            if validation_results['positioning_errors']:
                print(f"\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
                for error in validation_results['positioning_errors']:
                    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {error['page']}: {error['type']} - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {error['deviation_cm']:.2f} —Å–º")
            
            # 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            test_result['success'] = (
                len(detected_qr_codes) > 0 and 
                validation_results['summary']['accuracy_percentage'] >= 80.0
            )
            
            if test_result['success']:
                print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            else:
                print(f"\n‚ö†Ô∏è  –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
            test_result['error'] = str(e)
        
        return test_result
    
    def run_comprehensive_test(self, test_documents: List[str]) -> List[Dict]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –û–ü–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        all_results = []
        
        for i, doc_path in enumerate(test_documents, 1):
            print(f"\nüìã –¢–ï–°–¢ {i}/{len(test_documents)}: {os.path.basename(doc_path)}")
            print("-" * 50)
            
            if not os.path.exists(doc_path):
                print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")
                continue
            
            result = self.test_qr_generation_and_placement(doc_path)
            all_results.append(result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            result_file = f"/tmp/optical_test_result_{i}.json"
            with open(result_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_file}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_summary_report(all_results)
        
        return all_results
    
    def generate_summary_report(self, results: List[Dict]):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
        print("\n" + "=" * 70)
        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –¢–ï–°–¢–ê–ú")
        print("=" * 70)
        
        total_tests = len(results)
        successful_tests = sum(1 for r in results if r.get('success', False))
        total_qr_codes = sum(len(r.get('qr_codes_found', [])) for r in results)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        print(f"   üìÑ –í—Å–µ–≥–æ QR –∫–æ–¥–æ–≤: {total_qr_codes}")
        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        for i, result in enumerate(results, 1):
            doc_name = os.path.basename(result.get('input_document', f'Test {i}'))
            qr_count = len(result.get('qr_codes_found', []))
            success = result.get('success', False)
            accuracy = result.get('validation_results', {}).get('summary', {}).get('accuracy_percentage', 0)
            
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"   üìã {doc_name}: {qr_count} QR –∫–æ–¥–æ–≤, —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1f}% - {status}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary = {
            'timestamp': datetime.now().isoformat(),
            'total_tests': total_tests,
            'successful_tests': successful_tests,
            'total_qr_codes': total_qr_codes,
            'success_rate': (successful_tests/total_tests)*100,
            'detailed_results': results
        }
        
        summary_file = '/tmp/optical_test_summary.json'
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üî¨ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ü–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø QR –ö–û–î–û–í")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = QROpticalRecognitionTester()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_documents = [
        '/app/tmp/processed_pdfs/DOC-001_0_0daf5415.pdf',
        '/app/tmp/processed_pdfs/DOC-001_Y_FIXED.pdf',
        '/app/tmp/processed_pdfs/DOC-001_EXPANDED_REGION.pdf'
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
    results = tester.run_comprehensive_test(test_documents)
    
    print(f"\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(results)} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


if __name__ == "__main__":
    main()
