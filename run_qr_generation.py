#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
"""

import subprocess
import sys
import os
from pathlib import Path


def run_script(script_name: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")

    try:
        result = subprocess.run(
            [sys.executable, script_name],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent,
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)

        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {result.returncode})")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")
        return False


def check_requirements() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    try:
        import requests

        print("‚úÖ requests - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("‚ùå requests - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install requests")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø QR-–ö–û–î–û–í")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_requirements():
        print("\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs("test_results", exist_ok=True)
    print("üìÅ –ü–∞–ø–∫–∞ test_results –≥–æ—Ç–æ–≤–∞")

    # –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not run_script("setup_test_user.py", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False

    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤
    if not run_script("generate_qr_codes.py", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤"):
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã")
        return False

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print(f"{'='*60}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    qr_dir = Path("test_results/qr_codes")
    results_file = Path("test_results/qr_generation_results.json")

    if qr_dir.exists():
        qr_files = list(qr_dir.glob("*"))
        print(f"üì± QR-–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(qr_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"üìÅ –ü–∞–ø–∫–∞: {qr_dir.absolute()}")

    if results_file.exists():
        print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {results_file.absolute()}")

    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ QR-–∫–æ–¥–æ–≤: 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
    print(f"  ‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: PNG + SVG")
    print(f"  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç: TEST-DOC-001, —Ä–µ–≤–∏–∑–∏—è A")
    print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: test_results/")

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
