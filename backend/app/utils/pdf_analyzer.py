"""
PDF analyzer for detecting stamp and frame positions
"""

import structlog
from typing import Dict, Any, Tuple, Optional
from PyPDF2 import PdfReader
from PIL import Image
import io
import fitz  # PyMuPDF
import numpy as np

# Try to import OpenCV and scikit-image, fallback to basic functionality if not available
try:
    import cv2
    from scipy import ndimage
    from skimage import measure, morphology
    CV_AVAILABLE = True
except ImportError as e:
    structlog.get_logger().warning(f"OpenCV/scikit-image not available: {e}. Using fallback mode.")
    CV_AVAILABLE = False

class PDFAnalyzer:
    """PDF analyzer for detecting stamp and frame positions"""
    
    def __init__(self):
        self.logger = structlog.get_logger(__name__)
        
    def detect_stamp_top_edge_landscape(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ landscape —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è —à—Ç–∞–º–ø–∞ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback stamp detection")
            return self._fallback_stamp_detection(pdf_path, page_number)
            
        try:
            self.logger.debug("üîç Starting stamp detection for landscape page", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            self.logger.debug("üìÑ Page dimensions", 
                            page_width=page_width, page_height=page_height,
                            aspect_ratio=page_width/page_height)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ landscape –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            if page_width <= page_height:
                self.logger.warning("‚ö†Ô∏è Page is not in landscape orientation", 
                                  page_width=page_width, page_height=page_height,
                                  aspect_ratio=page_width/page_height)
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            mat = fitz.Matrix(2.0, 2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            self.logger.debug("üñºÔ∏è Image conversion", 
                            matrix_scale=2.0, 
                            pixmap_size=(pix.width, pix.height))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            
            self.logger.debug("üìä Image processing", 
                            original_size=(pil_image.width, pil_image.height),
                            grayscale_shape=img_array.shape,
                            pixel_range=(img_array.min(), img_array.max()))
            
            # –ò—â–µ–º —à—Ç–∞–º–ø –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –ª–∏—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ 20 —Å–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ 8 —Å–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            # –£–≤–µ–ª–∏—á–∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –æ—Ç –∫—Ä–∞—è –ª–∏—Å—Ç–∞ –¥–æ —Ä–∞–º–∫–∏ (0.5+ –º–º) + —Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–º –≤ –ø–∏–∫—Å–µ–ª–∏ (1 —Å–º = 28.35 —Ç–æ—á–µ–∫, –º–∞—Å—à—Ç–∞–± 2.0)
            stamp_width_cm = 20.0  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 15 –¥–æ 20 —Å–º –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞–º–∫–∏
            stamp_height_cm = 8.0  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 6 –¥–æ 8 —Å–º –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞–º–∫–∏
            stamp_width_pixels = int(stamp_width_cm * 28.35 * 2.0)  # 20 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            stamp_height_pixels = int(stamp_height_cm * 28.35 * 2.0)  # 8 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            right_start = max(0, img_array.shape[1] - stamp_width_pixels)
            bottom_start = max(0, img_array.shape[0] - stamp_height_pixels)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            stamp_region = img_array[bottom_start:, right_start:]
            
            self.logger.debug("üîç Stamp region analysis", 
                            total_height=img_array.shape[0],
                            total_width=img_array.shape[1],
                            stamp_region_height=stamp_region.shape[0],
                            stamp_region_width=stamp_region.shape[1],
                            stamp_width_cm=stamp_width_cm,
                            stamp_height_cm=stamp_height_cm,
                            right_start=right_start,
                            bottom_start=bottom_start)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
            edges = cv2.Canny(stamp_region, 30, 100)
            
            self.logger.debug("üîç Edge detection", 
                            canny_low=30, canny_high=100,
                            edges_shape=edges.shape,
                            edges_nonzero=np.count_nonzero(edges),
                            edges_percentage=np.count_nonzero(edges) / edges.size * 100)
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—É—Ä—ã
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            self.logger.debug("üìê Contour detection", 
                            total_contours=len(contours))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ñ–æ—Ä–º–µ (–∏—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)
            stamp_contours = []
            filtered_contours = []
            
            for i, contour in enumerate(contours):
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞
                area = cv2.contourArea(contour)
                if area < 100:  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
                    filtered_contours.append(f"contour_{i}: area={area:.0f} (too small)")
                    continue
                    
                # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                epsilon = 0.05 * cv2.arcLength(contour, True)  # –£–≤–µ–ª–∏—á–∏–ª–∏ epsilon
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (4 —É–≥–ª–∞) –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –Ω–µ–º—É
                if len(approx) >= 4:  # –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ —É–≥–ª–æ–≤
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π)
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h
                    if 0.3 < aspect_ratio < 5.0:  # –†–∞—Å—à–∏—Ä–∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
                        stamp_contours.append((contour, x, y, w, h))
                        filtered_contours.append(f"contour_{i}: area={area:.0f}, bbox=({x},{y},{w},{h}), aspect={aspect_ratio:.2f}, corners={len(approx)} ‚úÖ")
                    else:
                        filtered_contours.append(f"contour_{i}: area={area:.0f}, bbox=({x},{y},{w},{h}), aspect={aspect_ratio:.2f} (bad aspect)")
                else:
                    filtered_contours.append(f"contour_{i}: area={area:.0f}, corners={len(approx)} (not rectangular)")
            
            self.logger.debug("üîç Contour filtering", 
                            valid_stamp_contours=len(stamp_contours),
                            filtered_details=filtered_contours[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            
            if not stamp_contours:
                self.logger.warning("‚ùå No stamp contours found on landscape page")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —à—Ç–∞–º–ø–æ–º
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –ü–æ–∑–∏—Ü–∏—è (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª), 2) –†–∞–∑–º–µ—Ä, 3) –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            def stamp_score(contour_data):
                _, x, y, w, h = contour_data
                area = w * h
                aspect_ratio = w / h
                
                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
                position_score = 0
                if x > stamp_region.shape[1] * 0.6:  # –í –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.5 –¥–æ 0.6)
                    position_score += 4  # –£–≤–µ–ª–∏—á–∏–ª–∏ –±–æ–Ω—É—Å
                if y > stamp_region.shape[0] * 0.4:  # –í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.3 –¥–æ 0.4)
                    position_score += 4  # –£–≤–µ–ª–∏—á–∏–ª–∏ –±–æ–Ω—É—Å
                
                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π)
                aspect_score = 0
                if 1.5 < aspect_ratio < 4.0:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —à—Ç–∞–º–ø–∞
                    aspect_score += 3
                elif 1.0 < aspect_ratio < 6.0:  # –ü—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                    aspect_score += 1
                
                # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä (–Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
                size_score = 0
                if 1000 < area < 50000:  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    size_score += 2
                elif 500 < area < 100000:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
                    size_score += 1
                
                total_score = position_score + aspect_score + size_score
                return total_score
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ —à—Ç–∞–º–ø–∞
            stamp_contours.sort(key=stamp_score, reverse=True)
            
            self.logger.debug("üìä Stamp selection", 
                            total_candidates=len(stamp_contours),
                            areas=[x[3] * x[4] for x in stamp_contours])
            
            # –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—É—Ä —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
            _, x, y, w, h = stamp_contours[0]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±–æ—Ä–∞ —à—Ç–∞–º–ø–∞
            selected_score = stamp_score(stamp_contours[0])
            self.logger.debug("üéØ Selected stamp", 
                            bbox=(x, y, w, h),
                            area=w * h,
                            aspect_ratio=w / h,
                            score=selected_score)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            top_candidates = []
            for i, (_, cx, cy, cw, ch) in enumerate(stamp_contours[:3]):
                score = stamp_score(stamp_contours[i])
                top_candidates.append(f"#{i+1}: bbox=({cx},{cy},{cw},{ch}), area={cw*ch}, aspect={cw/ch:.2f}, score={score}")
            
            self.logger.debug("üèÜ Top stamp candidates", 
                            candidates=top_candidates)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # x, y - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            actual_x = right_start + x
            actual_y = bottom_start + y
            stamp_top_y = actual_y - h  # –í–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF —Ç–æ—á–∫–∏
            # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± (mat = 2.0)
            scale_factor = 2.0
            stamp_top_y_points = (img_array.shape[0] - stamp_top_y) / scale_factor
            
            self.logger.debug("üîÑ Coordinate conversion", 
                            right_start=right_start,
                            bottom_start=bottom_start,
                            actual_x=actual_x,
                            actual_y=actual_y,
                            stamp_top_y=stamp_top_y,
                            scale_factor=scale_factor,
                            final_y_points=stamp_top_y_points)
            
            self.logger.info("‚úÖ Stamp top edge detected successfully", 
                           stamp_top_y_points=stamp_top_y_points,
                           stamp_bbox=(x, y, w, h),
                           confidence="high" if len(stamp_contours) == 1 else "medium")
            
            doc.close()
            return stamp_top_y_points
            
        except Exception as e:
            self.logger.error("Error detecting stamp top edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_right_frame_edge(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∞–π —Ä–∞–º–∫–∏ –Ω–∞ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è —Ä–∞–º–∫–∏ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback frame detection")
            return self._fallback_frame_detection(pdf_path, page_number, "right")
            
        try:
            self.logger.debug("Detecting right frame edge", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            right_region_width = int(page_width * 0.2)  # –ü—Ä–∞–≤—ã–µ 20% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            right_region = img_array[:, -right_region_width:]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(right_region, 50, 150)
            
            # –ò—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 15))
            vertical_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, vertical_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(vertical_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ò—â–µ–º —Å–∞–º—É—é –ø—Ä–∞–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            rightmost_x = 0
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                if h > img_array.shape[0] * 0.3:  # –õ–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30% –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    rightmost_x = max(rightmost_x, x + w)
            
            if rightmost_x == 0:
                self.logger.warning("No right frame edge found")
                doc.close()
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # rightmost_x - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
            actual_x = (img_array.shape[1] - right_region_width) + rightmost_x
            frame_right_x_points = actual_x / 2.0  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
            
            self.logger.info("Right frame edge detected", 
                           frame_right_x_points=frame_right_x_points,
                           rightmost_x=rightmost_x)
            
            doc.close()
            return frame_right_x_points
            
        except Exception as e:
            self.logger.error("Error detecting right frame edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_bottom_frame_edge(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∞–π –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–∏ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —Ä–∞–º–∫–∏ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback frame detection")
            return self._fallback_frame_detection(pdf_path, page_number, "bottom")
            
        try:
            self.logger.debug("Detecting bottom frame edge", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            bottom_region_height = int(page_height * 0.2)  # –ù–∏–∂–Ω–∏–µ 20% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            bottom_region = img_array[-bottom_region_height:, :]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(bottom_region, 50, 150)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (15, 1))
            horizontal_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, horizontal_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(horizontal_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ò—â–µ–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            bottommost_y = 0
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                if w > img_array.shape[1] * 0.3:  # –õ–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30% —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    bottommost_y = max(bottommost_y, y + h)
            
            if bottommost_y == 0:
                self.logger.warning("No bottom frame edge found")
                doc.close()
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # bottommost_y - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏
            actual_y = (img_array.shape[0] - bottom_region_height) + bottommost_y
            frame_bottom_y_points = (img_array.shape[0] - actual_y) / 2.0  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
            
            self.logger.info("Bottom frame edge detected", 
                           frame_bottom_y_points=frame_bottom_y_points,
                           bottommost_y=bottommost_y)
            
            doc.close()
            return frame_bottom_y_points
            
        except Exception as e:
            self.logger.error("Error detecting bottom frame edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def analyze_page_layout(self, pdf_path: str, page_number: int = 0) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–∫–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.logger.debug("Analyzing page layout", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return {}
                
            page = doc[page_number]
            page_rect = page.rect
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            is_landscape = page_rect.width > page_rect.height
            
            result = {
                "page_number": page_number,
                "page_width": page_rect.width,
                "page_height": page_rect.height,
                "is_landscape": is_landscape,
                "stamp_top_edge": None,
                "right_frame_edge": None,
                "bottom_frame_edge": None
            }
            
            # –î–ª—è landscape —Å—Ç—Ä–∞–Ω–∏—Ü –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞
            stamp_top = None
            if is_landscape:
                stamp_top = self.detect_stamp_top_edge_landscape(pdf_path, page_number)
                result["stamp_top_edge"] = stamp_top
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            right_frame = self.detect_right_frame_edge(pdf_path, page_number)
            result["right_frame_edge"] = right_frame
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            bottom_frame = self.detect_bottom_frame_edge(pdf_path, page_number)
            result["bottom_frame_edge"] = bottom_frame
            
            self.logger.info("Page layout analysis completed", 
                           page_number=page_number,
                           is_landscape=is_landscape,
                           stamp_top_edge=stamp_top,
                           right_frame_edge=right_frame)
            
            doc.close()
            return result
            
        except Exception as e:
            self.logger.error("Error analyzing page layout", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return {}
    
    def _fallback_stamp_detection(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —à—Ç–∞–º–ø–∞ –±–µ–∑ OpenCV
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.logger.debug("üîÑ Using fallback stamp detection (no OpenCV)")
            
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range in fallback", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            
            self.logger.debug("üìÑ Fallback page analysis", 
                            page_width=page_rect.width, 
                            page_height=page_rect.height,
                            aspect_ratio=page_rect.width/page_rect.height)
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –î–ª—è landscape —Å—Ç—Ä–∞–Ω–∏—Ü - –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 10% –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –Ω–∏–∑–∞
            if page_rect.width > page_rect.height:  # Landscape
                estimated_stamp_y = page_rect.height * 0.1  # 10% –æ—Ç –≤—ã—Å–æ—Ç—ã
                self.logger.info("‚úÖ Fallback stamp detection (landscape)", 
                               estimated_y=estimated_stamp_y,
                               percentage=0.1,
                               method="heuristic")
                doc.close()
                return estimated_stamp_y
            else:
                self.logger.warning("‚ö†Ô∏è Fallback: page is not landscape", 
                                  page_width=page_rect.width, 
                                  page_height=page_rect.height)
            
            doc.close()
            return None
            
        except Exception as e:
            self.logger.error("‚ùå Error in fallback stamp detection", error=str(e))
            return None
    
    def _fallback_frame_detection(self, pdf_path: str, page_number: int = 0, frame_type: str = "right") -> Optional[float]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–∞–º–∫–∏ –±–µ–∑ OpenCV
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            
            if frame_type == "right":
                # –ü—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5% –æ—Ç —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
                estimated_frame_x = page_rect.width * 0.95  # 95% –æ—Ç —à–∏—Ä–∏–Ω—ã
                self.logger.info("Fallback right frame detection", estimated_x=estimated_frame_x)
                doc.close()
                return estimated_frame_x
            elif frame_type == "bottom":
                # –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5% –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –Ω–∏–∑–∞
                estimated_frame_y = page_rect.height * 0.05  # 5% –æ—Ç –≤—ã—Å–æ—Ç—ã
                self.logger.info("Fallback bottom frame detection", estimated_y=estimated_frame_y)
                doc.close()
                return estimated_frame_y
            
            doc.close()
            return None
            
        except Exception as e:
            self.logger.error("Error in fallback frame detection", error=str(e))
            return None
