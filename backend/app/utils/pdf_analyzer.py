"""
PDF analyzer for detecting stamp and frame positions
"""

import structlog
from typing import Dict, Any, Tuple, Optional, List
from PyPDF2 import PdfReader
from PIL import Image
import io
import fitz  # PyMuPDF
import numpy as np

# Try to import OpenCV and scikit-image, fallback to basic functionality if not available
try:
    import cv2
    from scipy import ndimage
    from skimage import measure, morphology
    CV_AVAILABLE = True
except ImportError as e:
    structlog.get_logger().warning(f"OpenCV/scikit-image not available: {e}. Using fallback mode.")
    CV_AVAILABLE = False

class PDFAnalyzer:
    """PDF analyzer for detecting stamp and frame positions"""
    
    def __init__(self):
        self.logger = structlog.get_logger(__name__)
        
    def detect_stamp_top_edge_landscape(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ landscape —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è —à—Ç–∞–º–ø–∞ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback stamp detection")
            return self._fallback_stamp_detection(pdf_path, page_number)
            
        try:
            self.logger.debug("üîç Starting stamp detection for landscape page", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            self.logger.debug("üìÑ Page dimensions", 
                            page_width=page_width, page_height=page_height,
                            aspect_ratio=page_width/page_height)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ landscape –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            if page_width <= page_height:
                self.logger.warning("‚ö†Ô∏è Page is not in landscape orientation", 
                                  page_width=page_width, page_height=page_height,
                                  aspect_ratio=page_width/page_height)
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            mat = fitz.Matrix(2.0, 2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            self.logger.debug("üñºÔ∏è Image conversion", 
                            matrix_scale=2.0, 
                            pixmap_size=(pix.width, pix.height))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            
            self.logger.debug("üìä Image processing", 
                            original_size=(pil_image.width, pil_image.height),
                            grayscale_shape=img_array.shape,
                            pixel_range=(img_array.min(), img_array.max()))
            
            # –ò—â–µ–º —à—Ç–∞–º–ø –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –ª–∏—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ 20 —Å–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ 8 —Å–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            # –£–≤–µ–ª–∏—á–∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –æ—Ç –∫—Ä–∞—è –ª–∏—Å—Ç–∞ –¥–æ —Ä–∞–º–∫–∏ (0.5+ –º–º) + —Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–º –≤ –ø–∏–∫—Å–µ–ª–∏ (1 —Å–º = 28.35 —Ç–æ—á–µ–∫, –º–∞—Å—à—Ç–∞–± 2.0)
            stamp_detection_area_width_cm = 20.0  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 15 –¥–æ 20 —Å–º –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞–º–∫–∏
            stamp_detection_area_height_cm = 10.0  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 6 –¥–æ 10 —Å–º –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞–º–∫–∏
            stamp_width_pixels = int(stamp_detection_area_width_cm * 28.35 * 2.0)  # 20 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            stamp_height_pixels = int(stamp_detection_area_height_cm * 28.35 * 2.0)  # 10 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            right_start = max(0, img_array.shape[1] - stamp_width_pixels)
            bottom_start = max(0, img_array.shape[0] - stamp_height_pixels)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            stamp_region = img_array[bottom_start:, right_start:]
            
            # –í –¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ, –≤ —Ü–µ–ª—è—Ö –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–¥–µ–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            try:
                # –°–æ–∑–¥–∞–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
                stamp_pil = Image.fromarray(stamp_region)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug_filename = f"/app/tmp/stamp_region_debug_page_{page_number}.png"
                stamp_pil.save(debug_filename)
                
                self.logger.debug("üíæ Saved stamp region for debugging", 
                                filename=debug_filename,
                                region_size=(stamp_region.shape[1], stamp_region.shape[0]),
                                region_size_cm=(round(stamp_region.shape[1] / (28.35 * 2.0), 2), 
                                              round(stamp_region.shape[0] / (28.35 * 2.0), 2)))
            except Exception as e:
                self.logger.warning("‚ö†Ô∏è Failed to save stamp region for debugging", error=str(e))

            self.logger.debug("üîç Stamp region analysis", 
                            total_height=img_array.shape[0],
                            total_width=img_array.shape[1],
                            stamp_region_height=stamp_region.shape[0],
                            stamp_region_width=stamp_region.shape[1],
                            stamp_width_cm=stamp_detection_area_width_cm,
                            stamp_height_cm=stamp_detection_area_height_cm,
                            right_start=right_start,
                            bottom_start=bottom_start)
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            right_frame_x = self._find_right_frame_in_stamp_region(stamp_region, right_start, bottom_start)
            if right_frame_x is not None:
                self.logger.info("‚úÖ Right frame found in stamp region", 
                               right_frame_x=right_frame_x,
                               right_frame_x_cm=round(right_frame_x / 28.35, 2))
            

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ 18 —Å–º+ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            self.logger.info("üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ 18 —Å–º+ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞")
            horizontal_line = self._find_horizontal_line_18cm_in_stamp_region(stamp_region, right_frame_x, right_start, bottom_start)
            if horizontal_line is not None:
                self.logger.info("‚úÖ Horizontal line 18cm+ found in stamp region", 
                               horizontal_line_y=horizontal_line["y"],
                               horizontal_line_y_cm=round(horizontal_line["y"] / 28.35, 2))

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            bottom_frame_y = self._find_bottom_frame_in_stamp_region(stamp_region, right_start, bottom_start)
            if bottom_frame_y is not None:
                self.logger.info("‚úÖ Bottom frame found in stamp region", 
                               bottom_frame_y=bottom_frame_y,
                               bottom_frame_y_cm=round(bottom_frame_y / 28.35, 2))

            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
            edges = cv2.Canny(stamp_region, 30, 100)
            
            self.logger.debug("üîç Edge detection", 
                            canny_low=30, canny_high=100,
                            edges_shape=edges.shape,
                            edges_nonzero=np.count_nonzero(edges),
                            edges_percentage=np.count_nonzero(edges) / edges.size * 100)
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—É—Ä—ã
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            self.logger.debug("üìê Contour detection", 
                            total_contours=len(contours))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ñ–æ—Ä–º–µ (–∏—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)
            stamp_contours = []
            filtered_contours = []
            
            for i, contour in enumerate(contours):
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞
                area = cv2.contourArea(contour)
                if area < 100:  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
                    filtered_contours.append(f"contour_{i}: area={area:.0f} (too small)")
                    continue
                    
                # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                epsilon = 0.05 * cv2.arcLength(contour, True)  # –£–≤–µ–ª–∏—á–∏–ª–∏ epsilon
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (4 —É–≥–ª–∞) –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –Ω–µ–º—É
                if len(approx) >= 4:  # –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ —É–≥–ª–æ–≤
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π)
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h
                    if 0.3 < aspect_ratio < 5.0:  # –†–∞—Å—à–∏—Ä–∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
                        stamp_contours.append((contour, x, y, w, h))
                        filtered_contours.append(f"contour_{i}: area={area:.0f}, bbox=({x},{y},{w},{h}), aspect={aspect_ratio:.2f}, corners={len(approx)} ‚úÖ")
                    else:
                        filtered_contours.append(f"contour_{i}: area={area:.0f}, bbox=({x},{y},{w},{h}), aspect={aspect_ratio:.2f} (bad aspect)")
                else:
                    filtered_contours.append(f"contour_{i}: area={area:.0f}, corners={len(approx)} (not rectangular)")
            
            self.logger.debug("üîç Contour filtering", 
                            valid_stamp_contours=len(stamp_contours),
                            filtered_details=filtered_contours[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            
            if not stamp_contours:
                self.logger.warning("‚ùå No stamp contours found on landscape page")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —à—Ç–∞–º–ø–æ–º
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –ü–æ–∑–∏—Ü–∏—è (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª), 2) –†–∞–∑–º–µ—Ä, 3) –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            def stamp_score(contour_data):
                _, x, y, w, h = contour_data
                area = w * h
                aspect_ratio = w / h
                
                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
                position_score = 0
                if x > stamp_region.shape[1] * 0.6:  # –í –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.5 –¥–æ 0.6)
                    position_score += 4  # –£–≤–µ–ª–∏—á–∏–ª–∏ –±–æ–Ω—É—Å
                if y > stamp_region.shape[0] * 0.4:  # –í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.3 –¥–æ 0.4)
                    position_score += 4  # –£–≤–µ–ª–∏—á–∏–ª–∏ –±–æ–Ω—É—Å
                
                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π)
                aspect_score = 0
                if 1.5 < aspect_ratio < 4.0:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —à—Ç–∞–º–ø–∞
                    aspect_score += 3
                elif 1.0 < aspect_ratio < 6.0:  # –ü—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                    aspect_score += 1
                
                # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä (–Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
                size_score = 0
                if 1000 < area < 50000:  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    size_score += 2
                elif 500 < area < 100000:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
                    size_score += 1
                
                total_score = position_score + aspect_score + size_score
                return total_score
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ —à—Ç–∞–º–ø–∞
            stamp_contours.sort(key=stamp_score, reverse=True)
            
            self.logger.debug("üìä Stamp selection", 
                            total_candidates=len(stamp_contours),
                            areas=[x[3] * x[4] for x in stamp_contours])
            
            # –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—É—Ä —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
            _, x, y, w, h = stamp_contours[0]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±–æ—Ä–∞ —à—Ç–∞–º–ø–∞
            selected_score = stamp_score(stamp_contours[0])
            self.logger.debug("üéØ Selected stamp", 
                            bbox=(x, y, w, h),
                            area=w * h,
                            aspect_ratio=w / h,
                            score=selected_score)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            top_candidates = []
            for i, (_, cx, cy, cw, ch) in enumerate(stamp_contours[:3]):
                score = stamp_score(stamp_contours[i])
                top_candidates.append(f"#{i+1}: bbox=({cx},{cy},{cw},{ch}), area={cw*ch}, aspect={cw/ch:.2f}, score={score}")
            
            self.logger.debug("üèÜ Top stamp candidates", 
                            candidates=top_candidates)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # x, y - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            actual_x = right_start + x
            actual_y = bottom_start + y
            stamp_top_y = actual_y - h  # –í–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF —Ç–æ—á–∫–∏
            # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± (mat = 2.0)
            scale_factor = 2.0
            stamp_top_y_points = (img_array.shape[0] - stamp_top_y) / scale_factor
            
            self.logger.debug("üîÑ Coordinate conversion", 
                            right_start=right_start,
                            bottom_start=bottom_start,
                            actual_x=actual_x,
                            actual_y=actual_y,
                            stamp_top_y=stamp_top_y,
                            scale_factor=scale_factor,
                            final_y_points=stamp_top_y_points)
            
            self.logger.info("‚úÖ Stamp top edge detected successfully", 
                           stamp_top_y_points=stamp_top_y_points,
                           stamp_bbox=(x, y, w, h),
                           confidence="high" if len(stamp_contours) == 1 else "medium")
            
            doc.close()
            return stamp_top_y_points
            
        except Exception as e:
            self.logger.error("Error detecting stamp top edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_qr_position_in_stamp_region(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è QR –∫–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –í –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É (–∫—Ä–∞–π–Ω—é—é –ø—Ä–∞–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é)
        2. –°—Ç–∞–≤–∏–º QR –∫–æ–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏
        3. –ï—Å–ª–∏ –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É –Ω–µ –Ω–∞—à–ª–∏ - fallback: —Å—Ç–∞–≤–∏–º –Ω–∞ 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –ª–∏—Å—Ç–∞
        4. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 18 —Å–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—â—É—é—Å—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
        5. –°—Ç–∞–≤–∏–º QR –Ω–∞–¥ —ç—Ç–æ–π –ª–∏–Ω–∏–µ–π
        6. –ï—Å–ª–∏ fallback - –∏—â–µ–º –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ —Å—Ç–∞–≤–∏–º QR –Ω–∞–¥ –Ω–µ–π
        7. –ï—Å–ª–∏ fallback - —Å—Ç–∞–≤–∏–º QR –Ω–∞ 1 —Å–º –≤—ã—à–µ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ QR –∫–æ–¥–∞ –∏–ª–∏ None
            {"x": float, "y": float, "width": float, "height": float}
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback QR positioning")
            return self._fallback_qr_position_in_stamp_region(pdf_path, page_number)
            
        try:
            self.logger.debug("üîç Starting QR position detection in stamp region", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
            stamp_width_cm = 20.0
            stamp_height_cm = 10.0
            stamp_width_pixels = int(stamp_width_cm * 28.35 * 2.0)
            stamp_height_pixels = int(stamp_height_cm * 28.35 * 2.0)
            
            right_start = max(0, img_array.shape[1] - stamp_width_pixels)
            bottom_start = max(0, img_array.shape[0] - stamp_height_pixels)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            stamp_region = img_array[bottom_start:, right_start:]
            
            self.logger.debug("üîç Analyzing stamp region for QR positioning", 
                            region_size=(stamp_region.shape[1], stamp_region.shape[0]),
                            region_size_cm=(round(stamp_region.shape[1] / (28.35 * 2.0), 2), 
                                          round(stamp_region.shape[0] / (28.35 * 2.0), 2)))
            
            # –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞
            qr_size_cm = 3.5
            qr_size_points = qr_size_cm * 28.35
            margin_cm = 0.5
            margin_points = margin_cm * 28.35
            
            # –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            right_frame_x = self._find_right_frame_in_stamp_region(stamp_region, right_start, bottom_start)
            
            if right_frame_x is not None:
                self.logger.info("‚úÖ Right frame found in stamp region", 
                               right_frame_x=right_frame_x,
                               right_frame_x_cm=round(right_frame_x / 28.35, 2))
                
                # –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 18 —Å–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—â—É—é—Å—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
                horizontal_line = self._find_horizontal_line_18cm_in_stamp_region(
                    stamp_region, right_frame_x, right_start, bottom_start)
                
                if horizontal_line:
                    self.logger.info("‚úÖ Horizontal line 18cm+ found in stamp region", 
                                   line_y=horizontal_line["y"],
                                   line_length_cm=horizontal_line["length_cm"])
                    
                    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º QR –∫–æ–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –∏ –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
                    x_position = right_frame_x - qr_size_points - margin_points
                    y_position = horizontal_line["y"] - qr_size_points - margin_points
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR –∫–æ–¥ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏
                    if x_position >= right_start and y_position >= bottom_start:
                        result = {
                            "x": x_position,
                            "y": y_position,
                            "width": qr_size_points,
                            "height": qr_size_points
                        }
                        
                        self.logger.info("‚úÖ QR position calculated using right frame and horizontal line", 
                                       x=result["x"], y=result["y"],
                                       x_cm=round(result["x"] / 28.35, 2),
                                       y_cm=round(result["y"] / 28.35, 2))
                        
                        doc.close()
                        return result
                
                # Fallback: –∏—â–µ–º –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
                self.logger.warning("‚ö†Ô∏è No suitable horizontal line found, trying bottom line fallback")
                bottom_line = self._find_bottom_horizontal_line_in_stamp_region(
                    stamp_region, right_frame_x, right_start, bottom_start)
                
                if bottom_line:
                    self.logger.info("‚úÖ Bottom horizontal line found in stamp region", 
                                   line_y=bottom_line["y"],
                                   line_length_cm=bottom_line["length_cm"])
                    
                    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º QR –∫–æ–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –∏ –Ω–∞–¥ –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–µ–π
                    x_position = right_frame_x - qr_size_points - margin_points
                    y_position = bottom_line["y"] - qr_size_points - margin_points
                    
                    if x_position >= right_start and y_position >= bottom_start:
                        result = {
                            "x": x_position,
                            "y": y_position,
                            "width": qr_size_points,
                            "height": qr_size_points
                        }
                        
                        self.logger.info("‚úÖ QR position calculated using right frame and bottom line", 
                                       x=result["x"], y=result["y"],
                                       x_cm=round(result["x"] / 28.35, 2),
                                       y_cm=round(result["y"] / 28.35, 2))
                        
                        doc.close()
                        return result
                
                # Fallback: —Å—Ç–∞–≤–∏–º QR –Ω–∞ 1 —Å–º –≤—ã—à–µ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è –ª–∏—Å—Ç–∞
                self.logger.warning("‚ö†Ô∏è No horizontal lines found, using bottom edge fallback")
                x_position = right_frame_x - qr_size_points - margin_points
                y_position = page_height - qr_size_points - (1.0 * 28.35)  # 1 —Å–º –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
                
                result = {
                    "x": x_position,
                    "y": y_position,
                    "width": qr_size_points,
                    "height": qr_size_points
                }
                
                self.logger.info("‚úÖ QR position calculated using right frame and bottom edge fallback", 
                               x=result["x"], y=result["y"],
                               x_cm=round(result["x"] / 28.35, 2),
                               y_cm=round(result["y"] / 28.35, 2))
                
                doc.close()
                return result
            
            else:
                # Fallback: –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É –Ω–µ –Ω–∞—à–ª–∏, —Å—Ç–∞–≤–∏–º –Ω–∞ 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –ª–∏—Å—Ç–∞
                self.logger.warning("‚ö†Ô∏è Right frame not found in stamp region, using right edge fallback")
                x_position = page_width - qr_size_points - (1.0 * 28.35)  # 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
                y_position = page_height - qr_size_points - (1.0 * 28.35)  # 1 —Å–º –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
                
                result = {
                    "x": x_position,
                    "y": y_position,
                    "width": qr_size_points,
                    "height": qr_size_points
                }
                
                self.logger.info("‚úÖ QR position calculated using right edge fallback", 
                               x=result["x"], y=result["y"],
                               x_cm=round(result["x"] / 28.35, 2),
                               y_cm=round(result["y"] / 28.35, 2))
                
                doc.close()
                return result
                
        except Exception as e:
            self.logger.error("Error detecting QR position in stamp region", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_right_frame_edge(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∞–π —Ä–∞–º–∫–∏ –Ω–∞ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è —Ä–∞–º–∫–∏ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback frame detection")
            return self._fallback_frame_detection(pdf_path, page_number, "right")
            
        try:
            self.logger.debug("Detecting right frame edge", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            right_region_width = int(page_width * 0.2)  # –ü—Ä–∞–≤—ã–µ 20% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            right_region = img_array[:, -right_region_width:]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(right_region, 50, 150)
            
            # –ò—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 15))
            vertical_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, vertical_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(vertical_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ò—â–µ–º —Å–∞–º—É—é –ø—Ä–∞–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            rightmost_x = 0
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                if h > img_array.shape[0] * 0.3:  # –õ–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30% –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    rightmost_x = max(rightmost_x, x + w)
            
            if rightmost_x == 0:
                self.logger.warning("No right frame edge found")
                doc.close()
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # rightmost_x - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
            actual_x = (img_array.shape[1] - right_region_width) + rightmost_x
            frame_right_x_points = actual_x / 2.0  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
            
            self.logger.info("Right frame edge detected", 
                           frame_right_x_points=frame_right_x_points,
                           rightmost_x=rightmost_x)
            
            doc.close()
            return frame_right_x_points
            
        except Exception as e:
            self.logger.error("Error detecting right frame edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_bottom_frame_edge(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∞–π –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–∏ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —Ä–∞–º–∫–∏ –≤ —Ç–æ—á–∫–∞—Ö PDF, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback frame detection")
            return self._fallback_frame_detection(pdf_path, page_number, "bottom")
            
        try:
            self.logger.debug("Detecting bottom frame edge", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            bottom_region_height = int(page_height * 0.2)  # –ù–∏–∂–Ω–∏–µ 20% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            bottom_region = img_array[-bottom_region_height:, :]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(bottom_region, 50, 150)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (15, 1))
            horizontal_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, horizontal_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(horizontal_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ò—â–µ–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            bottommost_y = 0
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                if w > img_array.shape[1] * 0.3:  # –õ–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30% —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    bottommost_y = max(bottommost_y, y + h)
            
            if bottommost_y == 0:
                self.logger.warning("No bottom frame edge found")
                doc.close()
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # bottommost_y - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏
            actual_y = (img_array.shape[0] - bottom_region_height) + bottommost_y
            frame_bottom_y_points = (img_array.shape[0] - actual_y) / 2.0  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
            
            self.logger.info("Bottom frame edge detected", 
                           frame_bottom_y_points=frame_bottom_y_points,
                           bottommost_y=bottommost_y)
            
            doc.close()
            return frame_bottom_y_points
            
        except Exception as e:
            self.logger.error("Error detecting bottom frame edge", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def analyze_page_layout(self, pdf_path: str, page_number: int = 0) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–∫–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.logger.debug("Analyzing page layout", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return {}
                
            page = doc[page_number]
            page_rect = page.rect
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            is_landscape = page_rect.width > page_rect.height
            
            result = {
                "page_number": page_number,
                "page_width": page_rect.width,
                "page_height": page_rect.height,
                "is_landscape": is_landscape,
                "stamp_top_edge": None,
                "right_frame_edge": None,
                "bottom_frame_edge": None,
                "horizontal_line_18cm": None,
                "free_space_3_5cm": None
            }
            
            # –î–ª—è landscape —Å—Ç—Ä–∞–Ω–∏—Ü –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —à—Ç–∞–º–ø–∞
            stamp_top = None
            if is_landscape:
                stamp_top = self.detect_stamp_top_edge_landscape(pdf_path, page_number)
                result["stamp_top_edge"] = stamp_top
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            right_frame = self.detect_right_frame_edge(pdf_path, page_number)
            result["right_frame_edge"] = right_frame
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            bottom_frame = self.detect_bottom_frame_edge(pdf_path, page_number)
            result["bottom_frame_edge"] = bottom_frame
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 18 —Å–º
            horizontal_line = self.detect_horizontal_line_18cm(pdf_path, page_number)
            result["horizontal_line_18cm"] = horizontal_line
            
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ 3.5x3.5 —Å–º –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É
            free_space = self.detect_free_space_3_5cm(pdf_path, page_number)
            result["free_space_3_5cm"] = free_space
            
            self.logger.info("Page layout analysis completed", 
                           page_number=page_number,
                           is_landscape=is_landscape,
                           stamp_top_edge=stamp_top,
                           right_frame_edge=right_frame,
                           horizontal_line_18cm=horizontal_line,
                           free_space_3_5cm=free_space)
            
            doc.close()
            return result
            
        except Exception as e:
            self.logger.error("Error analyzing page layout", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return {}
    
    def _fallback_stamp_detection(self, pdf_path: str, page_number: int = 0) -> Optional[float]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —à—Ç–∞–º–ø–∞ –±–µ–∑ OpenCV
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.logger.debug("üîÑ Using fallback stamp detection (no OpenCV)")
            
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range in fallback", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            
            self.logger.debug("üìÑ Fallback page analysis", 
                            page_width=page_rect.width, 
                            page_height=page_rect.height,
                            aspect_ratio=page_rect.width/page_rect.height)
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —à—Ç–∞–º–ø –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –î–ª—è landscape —Å—Ç—Ä–∞–Ω–∏—Ü - –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 10% –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –Ω–∏–∑–∞
            if page_rect.width > page_rect.height:  # Landscape
                estimated_stamp_y = page_rect.height * 0.1  # 10% –æ—Ç –≤—ã—Å–æ—Ç—ã
                self.logger.info("‚úÖ Fallback stamp detection (landscape)", 
                               estimated_y=estimated_stamp_y,
                               percentage=0.1,
                               method="heuristic")
                doc.close()
                return estimated_stamp_y
            else:
                self.logger.warning("‚ö†Ô∏è Fallback: page is not landscape", 
                                  page_width=page_rect.width, 
                                  page_height=page_rect.height)
            
            doc.close()
            return None
            
        except Exception as e:
            self.logger.error("‚ùå Error in fallback stamp detection", error=str(e))
            return None
    
    def detect_horizontal_line_18cm(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 15 —Å–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ None
            {"start_x": float, "end_x": float, "y": float, "length_cm": float}
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback horizontal line detection")
            return self._fallback_horizontal_line_detection(pdf_path, page_number)
            
        try:
            self.logger.debug("üîç Detecting horizontal line 18cm+ in top area", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤–µ—Ä—Ö–Ω–∏–µ 30%)
            top_region_height = int(page_height * 0.3)
            top_region = img_array[:top_region_height, :]
            
            self.logger.debug("üìä Top region analysis", 
                            total_height=img_array.shape[0],
                            top_region_height=top_region.shape[0],
                            top_region_width=top_region.shape[1])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(top_region, 30, 100)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (20, 1))
            horizontal_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, horizontal_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(horizontal_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏: 15 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å–Ω–∏–∂–µ–Ω–æ —Å 18 —Å–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)
            min_length_pixels = int(15.0 * 28.35 * 2.0)  # 15 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å –º–∞—Å—à—Ç–∞–±–æ–º 2.0
            
            self.logger.debug("üìè Line length requirements", 
                            min_length_cm=15.0,
                            min_length_pixels=min_length_pixels)
            
            # –ò—â–µ–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 15 —Å–º
            valid_lines = []
            
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã
                if w >= min_length_pixels and h <= 5:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Ç–æ–ª—Å—Ç–æ–π
                    line_length_cm = w / (28.35 * 2.0)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–º
                    
                    valid_lines.append({
                        "start_x": x,
                        "end_x": x + w,
                        "y": y,
                        "length_cm": line_length_cm
                    })
                    
                    self.logger.debug("üéØ Found candidate horizontal line in top area", 
                                    bbox=(x, y, w, h),
                                    length_cm=line_length_cm)
            
            if not valid_lines:
                self.logger.warning("‚ùå No horizontal line 15cm+ found in top area")
                doc.close()
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–Ω–∏–∏ –ø–æ Y-–ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç –≤–µ—Ä—Ö–∞ –∫ –Ω–∏–∑—É) –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é
            valid_lines.sort(key=lambda line: line["y"])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –≤–µ—Ä—Ö–∞ –∫ –Ω–∏–∑—É
            
            self.logger.debug("üìä Found horizontal lines in top area", 
                            total_lines=len(valid_lines),
                            lines_info=[f"Y={line['y']}, length={line['length_cm']:.1f}cm" 
                                       for line in valid_lines[:5]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –ª–∏–Ω–∏—é
            best_line = valid_lines[0]
            self.logger.info("‚úÖ Selected topmost horizontal line", 
                           y_position=best_line["y"],
                           length_cm=best_line["length_cm"],
                           total_candidates=len(valid_lines))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            # best_line –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ top_region
            actual_y = best_line["y"]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF —Ç–æ—á–∫–∏
            scale_factor = 2.0
            line_info = {
                "start_x": best_line["start_x"] / scale_factor,
                "end_x": best_line["end_x"] / scale_factor,
                "y": (img_array.shape[0] - actual_y) / scale_factor,
                "length_cm": best_line["length_cm"]
            }
            
            self.logger.info("‚úÖ Top horizontal line 15cm+ detected", 
                           start_x=line_info["start_x"],
                           end_x=line_info["end_x"],
                           y=line_info["y"],
                           length_cm=line_info["length_cm"])
            
            doc.close()
            return line_info
            
        except Exception as e:
            self.logger.error("‚ùå Error detecting top horizontal line 15cm+", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def detect_free_space_3_5cm(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        –ò—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–∑–º–µ—Ä–æ–º 3.5x3.5 —Å–º –¥–ª—è QR –∫–æ–¥–∞
        
        –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
        2. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Å—Ç–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∏–ª–∏ None
            {"x": float, "y": float, "width": float, "height": float}
        """
        try:
            self.logger.debug("üîç Searching for free space 3.5x3.5cm with new algorithm", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –®–∞–≥ 1: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
            self.logger.debug("üîç Step 1: Trying to find QR position in stamp region")
            stamp_region_position = self.detect_qr_position_in_stamp_region(pdf_path, page_number)
            
            if stamp_region_position:
                self.logger.info("‚úÖ QR position found in stamp region", 
                               x=stamp_region_position["x"], y=stamp_region_position["y"],
                               x_cm=round(stamp_region_position["x"] / 28.35, 2),
                               y_cm=round(stamp_region_position["y"] / 28.35, 2))
                return stamp_region_position
            
            # –®–∞–≥ 2: Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Å—Ç–∞
            self.logger.warning("‚ö†Ô∏è No position found in stamp region, falling back to top area algorithm")
            return self._detect_free_space_3_5cm_top_area(pdf_path, page_number)
            
        except Exception as e:
            self.logger.error("‚ùå Error detecting free space 3.5x3.5cm", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def _detect_free_space_3_5cm_top_area(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Å—Ç–∞
        (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ detect_free_space_3_5cm)
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∏–ª–∏ None
            {"x": float, "y": float, "width": float, "height": float}
        """
        try:
            self.logger.debug("üîç Searching for free space 3.5x3.5cm in top area with alternative positioning", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–µ
            right_frame = self.detect_right_frame_edge(pdf_path, page_number)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_lines = self._find_all_horizontal_lines(pdf_path, page_number)
            
            if not horizontal_lines:
                self.logger.warning("‚ùå No horizontal lines 15cm+ found, cannot determine QR position")
                return None
            
            # –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞: 3.5 —Å–º x 3.5 —Å–º
            qr_size_cm = 3.5
            qr_size_points = qr_size_cm * 28.35  # 99.225 —Ç–æ—á–µ–∫
            
            # –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤
            margin_cm = 0.5  # 0.5 —Å–º –æ—Ç—Å—Ç—É–ø
            margin_points = margin_cm * 28.35
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            doc = fitz.open(pdf_path)
            page = doc[page_number]
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            doc.close()
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–π –≤–µ—Ä—Ö–Ω–µ–π
            for i, horizontal_line in enumerate(horizontal_lines):
                self.logger.debug("üîç Trying horizontal line {} of {}".format(i + 1, len(horizontal_lines)),
                                line_y=horizontal_line["y"],
                                line_length_cm=horizontal_line["length_cm"])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é QR –∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–π –ª–∏–Ω–∏–∏
                x_position, y_position = self._calculate_qr_position_for_line(
                    horizontal_line, right_frame, qr_size_points, margin_points, 
                    page_width, page_height
                )
                
                self.logger.debug("üìç Calculated QR position for line {}: ({}, {})".format(i + 1, x_position, y_position))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞—è
                is_empty = self._is_area_empty(pdf_path, page_number, x_position, y_position, qr_size_points, qr_size_points)
                
                if is_empty:
                    result = {
                        "x": x_position,
                        "y": y_position,
                        "width": qr_size_points,
                        "height": qr_size_points
                    }
                    
                    self.logger.info("‚úÖ Free space 3.5x3.5cm found and verified as empty using line {} of {}".format(i + 1, len(horizontal_lines)), 
                                   line_y=horizontal_line["y"],
                                   line_length_cm=horizontal_line["length_cm"],
                                   x=result["x"],
                                   y=result["y"],
                                   width=result["width"],
                                   height=result["height"],
                                   x_cm=round(result["x"] / 28.35, 2),
                                   y_cm=round(result["y"] / 28.35, 2))
                    
                    return result
                else:
                    self.logger.warning("‚ùå Area for line {} is not empty, trying next line".format(i + 1),
                                      line_y=horizontal_line["y"],
                                      x_position=x_position,
                                      y_position=y_position,
                                      x_cm=round(x_position / 28.35, 2),
                                      y_cm=round(y_position / 28.35, 2))
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ª–∏–Ω–∏—è –Ω–µ –ø–æ–¥–æ—à–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback)
            self.logger.warning("‚ùå No empty space found for any horizontal line, will use fallback algorithm")
            return None
            
        except Exception as e:
            self.logger.error("‚ùå Error detecting free space 3.5x3.5cm in top area", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return None
    
    def _find_all_horizontal_lines(self, pdf_path: str, page_number: int = 0) -> List[Dict[str, float]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 15 —Å–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö
            [{"start_x": float, "end_x": float, "y": float, "length_cm": float}, ...]
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, using fallback horizontal line detection")
            fallback_line = self._fallback_horizontal_line_detection(pdf_path, page_number)
            return [fallback_line] if fallback_line else []
            
        try:
            self.logger.debug("üîç Finding all horizontal lines 15cm+ in top area", 
                            pdf_path=pdf_path, page_number=page_number)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return []
                
            page = doc[page_number]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤–µ—Ä—Ö–Ω–∏–µ 30%)
            top_region_height = int(page_height * 0.3)
            top_region = img_array[:top_region_height, :]
            
            self.logger.debug("üìä Top region analysis", 
                            total_height=img_array.shape[0],
                            top_region_height=top_region.shape[0],
                            top_region_width=top_region.shape[1])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(top_region, 30, 100)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (20, 1))
            horizontal_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, horizontal_kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            contours, _ = cv2.findContours(horizontal_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏: 15 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            min_length_pixels = int(15.0 * 28.35 * 2.0)  # 15 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å –º–∞—Å—à—Ç–∞–±–æ–º 2.0
            
            self.logger.debug("üìè Line length requirements", 
                            min_length_cm=15.0,
                            min_length_pixels=min_length_pixels)
            
            # –ò—â–µ–º –≤—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 15 —Å–º
            valid_lines = []
            
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã
                if w >= min_length_pixels and h <= 5:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Ç–æ–ª—Å—Ç–æ–π
                    line_length_cm = w / (28.35 * 2.0)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–º
                    
                    valid_lines.append({
                        "start_x": x,
                        "end_x": x + w,
                        "y": y,
                        "length_cm": line_length_cm
                    })
                    
                    self.logger.debug("üéØ Found candidate horizontal line in top area", 
                                    bbox=(x, y, w, h),
                                    length_cm=line_length_cm)
            
            if not valid_lines:
                self.logger.warning("‚ùå No horizontal line 15cm+ found in top area")
                doc.close()
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–Ω–∏–∏ –ø–æ Y-–ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç –≤–µ—Ä—Ö–∞ –∫ –Ω–∏–∑—É)
            valid_lines.sort(key=lambda line: line["y"])
            
            self.logger.debug("üìä Found horizontal lines in top area", 
                            total_lines=len(valid_lines),
                            lines_info=[f"Y={line['y']}, length={line['length_cm']:.1f}cm" 
                                       for line in valid_lines])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ PDF —Ç–æ—á–∫–∏
            scale_factor = 2.0
            result_lines = []
            
            for line in valid_lines:
                line_info = {
                    "start_x": line["start_x"] / scale_factor,
                    "end_x": line["end_x"] / scale_factor,
                    "y": (img_array.shape[0] - line["y"]) / scale_factor,
                    "length_cm": line["length_cm"]
                }
                result_lines.append(line_info)
            
            self.logger.info("‚úÖ Found {} horizontal lines 15cm+ in top area".format(len(result_lines)))
            
            doc.close()
            return result_lines
            
        except Exception as e:
            self.logger.error("‚ùå Error finding all horizontal lines 15cm+", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return []
    
    def _is_area_empty(self, pdf_path: str, page_number: int, x: float, y: float, width: float, height: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π (–±–µ–∑ –∑–Ω–∞—á–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö
            width, height: –†–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –ø—É—Å—Ç–∞—è, False –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã
        """
        if not CV_AVAILABLE:
            self.logger.warning("OpenCV not available, assuming area is empty")
            return True
            
        try:
            self.logger.debug("üîç Checking if area is empty", 
                            x=x, y=y, width=width, height=height,
                            x_cm=round(x / 28.35, 2), y_cm=round(y / 28.35, 2),
                            width_cm=round(width / 28.35, 2), height_cm=round(height / 28.35, 2))
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range", 
                                page_number=page_number, total_pages=len(doc))
                return False
                
            page = doc[page_number]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.open(io.BytesIO(img_data))
            img_array = np.array(pil_image.convert('L'))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ PDF —Ç–æ—á–µ–∫ –≤ –ø–∏–∫—Å–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            scale_factor = 2.0
            x_pixels = int(x * scale_factor)
            y_pixels = int(y * scale_factor)
            width_pixels = int(width * scale_factor)
            height_pixels = int(height * scale_factor)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            if (x_pixels < 0 or y_pixels < 0 or 
                x_pixels + width_pixels > img_array.shape[1] or 
                y_pixels + height_pixels > img_array.shape[0]):
                self.logger.warning("‚ö†Ô∏è Area extends beyond image boundaries", 
                                  x_pixels=x_pixels, y_pixels=y_pixels,
                                  width_pixels=width_pixels, height_pixels=height_pixels,
                                  img_width=img_array.shape[1], img_height=img_array.shape[0])
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            area = img_array[y_pixels:y_pixels + height_pixels, 
                           x_pixels:x_pixels + width_pixels]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è—Ä–∫–æ—Å—Ç–∏
            mean_brightness = np.mean(area)
            std_brightness = np.std(area)
            
            # –û–±–ª–∞—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏:
            # 1. –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ –±–µ–ª–æ–º—É (–≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            # 2. –ù–∏–∑–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–º–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–∏)
            # 3. –ú–∞–ª–æ –∫—Ä–∞–µ–≤ (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            is_bright = mean_brightness > 200  # –ë–ª–∏–∑–∫–æ –∫ –±–µ–ª–æ–º—É
            is_uniform = std_brightness < 100  # –ú–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–∏ (—Å–º—è–≥—á–µ–Ω–æ –¥–æ 100)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –∫—Ä–∞—è –≤ –æ–±–ª–∞—Å—Ç–∏
            edges = cv2.Canny(area, 50, 150)
            edge_pixels = np.sum(edges > 0)
            total_pixels = area.shape[0] * area.shape[1]
            edge_ratio = edge_pixels / total_pixels
            
            # –û–±–ª–∞—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –º–∞–ª–æ –∫—Ä–∞–µ–≤
            has_few_edges = edge_ratio < 0.05  # –ú–µ–Ω–µ–µ 5% –ø–∏–∫—Å–µ–ª–µ–π —è–≤–ª—è—é—Ç—Å—è –∫—Ä–∞—è–º–∏
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –æ—á–µ–Ω—å —è—Ä–∫–∞—è, —Ç–æ –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫—Ä–∞–µ–≤ —Å—á–∏—Ç–∞–µ–º –µ—ë –ø—É—Å—Ç–æ–π
            is_very_bright = mean_brightness > 240  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –±–µ–ª–æ–º—É
            
            is_empty = (is_bright and is_uniform and has_few_edges) or is_very_bright
            
            self.logger.debug("üìä Area analysis results", 
                            mean_brightness=round(mean_brightness, 1),
                            std_brightness=round(std_brightness, 1),
                            edge_pixels=edge_pixels,
                            total_pixels=total_pixels,
                            edge_ratio=round(edge_ratio, 3),
                            is_bright=is_bright,
                            is_uniform=is_uniform,
                            has_few_edges=has_few_edges,
                            is_very_bright=is_very_bright,
                            is_empty=is_empty)
            
            doc.close()
            return is_empty
            
        except Exception as e:
            self.logger.error("‚ùå Error checking if area is empty", 
                            error=str(e), pdf_path=pdf_path, page_number=page_number)
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—É—Å—Ç–æ–π
    
    def _calculate_qr_position_for_line(self, horizontal_line: Dict[str, float], right_frame: Optional[float], 
                                      qr_size_points: float, margin_points: float, 
                                      page_width: float, page_height: float) -> tuple[float, float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é QR –∫–æ–¥–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        
        Args:
            horizontal_line: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
            right_frame: –ü–æ–∑–∏—Ü–∏—è –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            qr_size_points: –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞ –≤ —Ç–æ—á–∫–∞—Ö
            margin_points: –û—Ç—Å—Ç—É–ø –≤ —Ç–æ—á–∫–∞—Ö
            page_width: –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–æ—á–∫–∞—Ö
            page_height: –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–æ—á–∫–∞—Ö
            
        Returns:
            Tuple (x_position, y_position) –≤ —Ç–æ—á–∫–∞—Ö
        """
        # Y-–ø–æ–∑–∏—Ü–∏—è: –Ω–∏–∂–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
        y_position = horizontal_line["y"] - qr_size_points - margin_points
        
        # X-–ø–æ–∑–∏—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
        if right_frame:
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ª–µ–≤–∞ –æ—Ç –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
            x_position = right_frame - qr_size_points - margin_points
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR –∫–æ–¥ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
            min_x = margin_points
            if x_position < min_x:
                x_position = min_x
        else:
            # Fallback: –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            x_position = margin_points
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR –∫–æ–¥ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        if x_position + qr_size_points > horizontal_line["end_x"]:
            # –°–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–∏–Ω–∏–∏
            x_position = horizontal_line["end_x"] - qr_size_points - margin_points
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if x_position < margin_points:
            x_position = margin_points
        if x_position + qr_size_points > page_width - margin_points:
            x_position = page_width - qr_size_points - margin_points
        if y_position < margin_points:
            y_position = margin_points
        if y_position + qr_size_points > page_height - margin_points:
            y_position = page_height - qr_size_points - margin_points
        
        return x_position, y_position
    
    def _fallback_horizontal_line_detection(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –±–µ–∑ OpenCV
        """
        try:
            self.logger.debug("üîÑ Using fallback horizontal line detection (no OpenCV)")
            
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
            # –ü—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 10% –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –≤–µ—Ä—Ö–∞
            estimated_y = page_rect.height * 0.9
            estimated_start_x = page_rect.width * 0.1  # 10% –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
            estimated_end_x = page_rect.width * 0.9    # 90% –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
            estimated_length_cm = (estimated_end_x - estimated_start_x) / 28.35
            
            result = {
                "start_x": estimated_start_x,
                "end_x": estimated_end_x,
                "y": estimated_y,
                "length_cm": estimated_length_cm
            }
            
            self.logger.info("‚úÖ Fallback horizontal line detection (top area)", 
                           start_x=result["start_x"],
                           end_x=result["end_x"],
                           y=result["y"],
                           length_cm=result["length_cm"],
                           method="heuristic_top")
            
            doc.close()
            return result
            
        except Exception as e:
            self.logger.error("‚ùå Error in fallback horizontal line detection", error=str(e))
            return None

    def _fallback_frame_detection(self, pdf_path: str, page_number: int = 0, frame_type: str = "right") -> Optional[float]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–∞–º–∫–∏ –±–µ–∑ OpenCV
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            
            if frame_type == "right":
                # –ü—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5% –æ—Ç —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
                estimated_frame_x = page_rect.width * 0.95  # 95% –æ—Ç —à–∏—Ä–∏–Ω—ã
                self.logger.info("Fallback right frame detection", estimated_x=estimated_frame_x)
                doc.close()
                return estimated_frame_x
            elif frame_type == "bottom":
                # –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5% –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –Ω–∏–∑–∞
                estimated_frame_y = page_rect.height * 0.05  # 5% –æ—Ç –≤—ã—Å–æ—Ç—ã
                self.logger.info("Fallback bottom frame detection", estimated_y=estimated_frame_y)
                doc.close()
                return estimated_frame_y
            
            doc.close()
            return None
            
        except Exception as e:
            self.logger.error("Error in fallback frame detection", error=str(e))
            return None
    
    def _find_right_frame_in_stamp_region(self, stamp_region: np.ndarray, right_start: int, bottom_start: int) -> Optional[float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É (–∫—Ä–∞–π–Ω—é—é –ø—Ä–∞–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é) –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
        
        Args:
            stamp_region: –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –∫–∞–∫ numpy array
            right_start: –ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            bottom_start: –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
            X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö –∏–ª–∏ None
        """
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            edges = cv2.Canny(stamp_region, 30, 100)
            
            # –ò—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é HoughLinesP
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, 
                                  minLineLength=100, maxLineGap=10)
            
            if lines is None:
                self.logger.debug("‚ùå No lines found in stamp region")
                return None
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—É–≥–æ–ª –±–ª–∏–∑–∫–∏–π –∫ 90 –≥—Ä–∞–¥—É—Å–∞–º)
            vertical_lines = []
            for line in lines:
                x1, y1, x2, y2 = line[0]
                if x1 == x2:  # –°—Ç—Ä–æ–≥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    vertical_lines.append(x1)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
                    angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
                    if abs(angle - 90) < 10 or abs(angle + 90) < 10:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                        vertical_lines.append((x1 + x2) // 2)
            
            if not vertical_lines:
                self.logger.debug("‚ùå No vertical lines found in stamp region")
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞–π–Ω—é—é –ø—Ä–∞–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            rightmost_x = max(vertical_lines)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            right_frame_x_points = (right_start + rightmost_x) / 2.0  # –ú–∞—Å—à—Ç–∞–± 2.0
            
            self.logger.debug("‚úÖ Right frame found in stamp region", 
                            rightmost_x_pixels=rightmost_x,
                            right_frame_x_points=right_frame_x_points,
                            right_frame_x_cm=round(right_frame_x_points / 28.35, 2))
            
            return right_frame_x_points
            
        except Exception as e:
            self.logger.error("Error finding right frame in stamp region", error=str(e))
            return None
    
    def _find_horizontal_line_18cm_in_stamp_region(self, stamp_region: np.ndarray, right_frame_x: float, 
                                                 right_start: int, bottom_start: int) -> Optional[Dict[str, float]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 18 —Å–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—â—É—é—Å—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
        
        Args:
            stamp_region: –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –∫–∞–∫ numpy array
            right_frame_x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö
            right_start: –ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            bottom_start: –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ None
            {"y": float, "length_cm": float}
        """
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(stamp_region, 30, 100)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, 
                                  minLineLength=100, maxLineGap=10)
            
            if lines is None:
                self.logger.debug("‚ùå No lines found for horizontal line detection")
                return None
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (18 —Å–º)
            min_length_pixels = int(18.0 * 28.35 * 2.0)  # 18 —Å–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É –≤ –ø–∏–∫—Å–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
            right_frame_x_pixels = int((right_frame_x - right_start) * 2.0)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_lines = []
            for line in lines:
                x1, y1, x2, y2 = line[0]
                if y1 == y2:  # –°—Ç—Ä–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    length = abs(x2 - x1)
                    if length >= min_length_pixels:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –ª–∏–Ω–∏—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
                        if (x1 <= right_frame_x_pixels <= x2) or (x2 <= right_frame_x_pixels <= x1):
                            horizontal_lines.append((y1, length))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
                    angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
                    if abs(angle) < 10 or abs(angle - 180) < 10:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                        length = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
                        if length >= min_length_pixels:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –ª–∏–Ω–∏—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
                            if (x1 <= right_frame_x_pixels <= x2) or (x2 <= right_frame_x_pixels <= x1):
                                horizontal_lines.append(((y1 + y2) // 2, length))
            
            if not horizontal_lines:
                self.logger.debug("‚ùå No horizontal lines 18cm+ found in stamp region")
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –ª–∏–Ω–∏—é (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
            top_line = min(horizontal_lines, key=lambda x: x[0])
            y_pixels, length_pixels = top_line
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            y_points = (bottom_start + y_pixels) / 2.0  # –ú–∞—Å—à—Ç–∞–± 2.0
            length_cm = length_pixels / (28.35 * 2.0)
            
            result = {
                "y": y_points,
                "length_cm": length_cm
            }
            
            self.logger.debug("‚úÖ Top horizontal line 18cm+ found in stamp region", 
                            y_pixels=y_pixels, y_points=y_points,
                            length_pixels=length_pixels, length_cm=length_cm)
            
            return result
            
        except Exception as e:
            self.logger.error("Error finding horizontal line in stamp region", error=str(e))
            return None
    
    def _find_bottom_horizontal_line_in_stamp_region(self, stamp_region: np.ndarray, right_frame_x: float, 
                                                   right_start: int, bottom_start: int) -> Optional[Dict[str, float]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
        
        Args:
            stamp_region: –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –∫–∞–∫ numpy array
            right_frame_x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö
            right_start: –ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            bottom_start: –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ None
            {"y": float, "length_cm": float}
        """
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(stamp_region, 30, 100)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, 
                                  minLineLength=50, maxLineGap=10)  # –ú–µ–Ω—å—à–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–ª–∏–Ω–µ
            
            if lines is None:
                self.logger.debug("‚ùå No lines found for bottom horizontal line detection")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é —Ä–∞–º–∫—É –≤ –ø–∏–∫—Å–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
            right_frame_x_pixels = int((right_frame_x - right_start) * 2.0)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_lines = []
            for line in lines:
                x1, y1, x2, y2 = line[0]
                if y1 == y2:  # –°—Ç—Ä–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    length = abs(x2 - x1)
                    if length >= 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –ª–∏–Ω–∏—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
                        if (x1 <= right_frame_x_pixels <= x2) or (x2 <= right_frame_x_pixels <= x1):
                            horizontal_lines.append((y1, length))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
                    angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
                    if abs(angle) < 10 or abs(angle - 180) < 10:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                        length = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
                        if length >= 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –ª–∏–Ω–∏—è —Å –ø—Ä–∞–≤–æ–π —Ä–∞–º–∫–æ–π
                            if (x1 <= right_frame_x_pixels <= x2) or (x2 <= right_frame_x_pixels <= x1):
                                horizontal_lines.append(((y1 + y2) // 2, length))
            
            if not horizontal_lines:
                self.logger.debug("‚ùå No horizontal lines found in stamp region")
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –ª–∏–Ω–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
            bottom_line = max(horizontal_lines, key=lambda x: x[0])
            y_pixels, length_pixels = bottom_line
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            y_points = (bottom_start + y_pixels) / 2.0  # –ú–∞—Å—à—Ç–∞–± 2.0
            length_cm = length_pixels / (28.35 * 2.0)
            
            result = {
                "y": y_points,
                "length_cm": length_cm
            }
            
            self.logger.debug("‚úÖ Bottom horizontal line found in stamp region", 
                            y_pixels=y_pixels, y_points=y_points,
                            length_pixels=length_pixels, length_cm=length_cm)
            
            return result
            
        except Exception as e:
            self.logger.error("Error finding bottom horizontal line in stamp region", error=str(e))
            return None
    
    def _find_bottom_frame_in_stamp_region(self, stamp_region: np.ndarray, right_start: int, bottom_start: int) -> Optional[float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –Ω–∏–∂–Ω—é—é —Ä–∞–º–∫—É –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞
        
        Args:
            stamp_region: –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –∫–∞–∫ numpy array
            right_start: –ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            bottom_start: –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
            Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–∏ –≤ PDF —Ç–æ—á–∫–∞—Ö –∏–ª–∏ None
        """
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            edges = cv2.Canny(stamp_region, 30, 100)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, 
                                  minLineLength=100, maxLineGap=10)
            
            if lines is None:
                return None
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            horizontal_lines = []
            for line in lines:
                x1, y1, x2, y2 = line[0]
                if y1 == y2:  # –°—Ç—Ä–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    horizontal_lines.append(y1)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
                    angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
                    if abs(angle) < 10 or abs(angle - 180) < 10:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                        horizontal_lines.append((y1 + y2) // 2)
            
            if not horizontal_lines:
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            bottommost_y = max(horizontal_lines)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            bottom_frame_y_points = (bottom_start + bottommost_y) / 2.0  # –ú–∞—Å—à—Ç–∞–± 2.0
            
            return bottom_frame_y_points
            
        except Exception as e:
            self.logger.error("Error finding bottom frame in stamp region", error=str(e))
            return None

    def _fallback_qr_position_in_stamp_region(self, pdf_path: str, page_number: int = 0) -> Optional[Dict[str, float]]:
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–ø–∞ –±–µ–∑ OpenCV
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ QR –∫–æ–¥–∞ –∏–ª–∏ None
        """
        try:
            self.logger.debug("üîÑ Using fallback QR positioning in stamp region")
            
            doc = fitz.open(pdf_path)
            if page_number >= len(doc):
                self.logger.error("‚ùå Page number out of range in fallback", 
                                page_number=page_number, total_pages=len(doc))
                return None
                
            page = doc[page_number]
            page_rect = page.rect
            page_width = page_rect.width
            page_height = page_rect.height
            
            # –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞
            qr_size_cm = 3.5
            qr_size_points = qr_size_cm * 28.35
            
            # Fallback: —Å—Ç–∞–≤–∏–º QR –Ω–∞ 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –∏ 1 —Å–º –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
            x_position = page_width - qr_size_points - (1.0 * 28.35)  # 1 —Å–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
            y_position = page_height - qr_size_points - (1.0 * 28.35)  # 1 —Å–º –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
            
            result = {
                "x": x_position,
                "y": y_position,
                "width": qr_size_points,
                "height": qr_size_points
            }
            
            self.logger.info("‚úÖ Fallback QR position calculated in stamp region", 
                           x=result["x"], y=result["y"],
                           x_cm=round(result["x"] / 28.35, 2),
                           y_cm=round(result["y"] / 28.35, 2))
            
            doc.close()
            return result
            
        except Exception as e:
            self.logger.error("Error in fallback QR positioning in stamp region", error=str(e))
            return None
