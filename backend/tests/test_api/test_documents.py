"""
Integration tests for document endpoints
"""

from fastapi.testclient import TestClient


class TestDocumentEndpoints:
    """Test document status endpoints"""

    def test_get_document_status_not_found(self, client: TestClient):
        """Test document status for non-existent document."""
        response = client.get("/api/v1/documents/NONEXISTENT/revisions/A/status?page=1")

        assert response.status_code == 404
        data = response.json()
        assert "detail" in data

    def test_get_document_status_invalid_page(self, client: TestClient):
        """Test document status with invalid page number."""
        response = client.get(
            "/api/v1/documents/TEST-DOC-001/revisions/A/status?page=0"
        )

        assert response.status_code == 422  # Validation error

    def test_get_document_status_missing_page(self, client: TestClient):
        """Test document status without page parameter."""
        response = client.get("/api/v1/documents/TEST-DOC-001/revisions/A/status")

        assert response.status_code == 422  # Validation error

    def test_verify_qr_signature_valid(self, client: TestClient):
        """Test QR signature verification with valid signature."""
        # This would need a valid signature generated by the system
        response = client.get(
            "/api/v1/documents/qr/verify",
            params={
                "doc_uid": "TEST-DOC-001",
                "rev": "A",
                "page": 1,
                "ts": 1234567890,
                "sig": "test_signature",
            },
        )

        assert response.status_code == 200
        data = response.json()
        assert "valid" in data
        assert "message" in data

    def test_verify_qr_signature_missing_params(self, client: TestClient):
        """Test QR signature verification with missing parameters."""
        response = client.get("/api/v1/documents/qr/verify")

        assert response.status_code == 422  # Validation error

    def test_verify_qr_signature_invalid_params(self, client: TestClient):
        """Test QR signature verification with invalid parameters."""
        response = client.get(
            "/api/v1/documents/qr/verify",
            params={
                "doc_uid": "TEST-DOC-001",
                "rev": "A",
                "page": "invalid",
                "ts": "invalid",
                "sig": "test_signature",
            },
        )

        assert response.status_code == 422  # Validation error
