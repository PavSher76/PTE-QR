#!/usr/bin/env python3
"""
CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QR –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
import argparse
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')

from app.utils.pdf_analyzer import PDFAnalyzer
from app.core.config import settings
import structlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

def analyze_pdf(pdf_path: str, page_number: int = 0, **kwargs):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
    
    if not os.path.exists(pdf_path):
        logger.error("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", pdf_path=pdf_path)
        return False
    
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª", pdf_path=pdf_path, page_number=page_number)
    
    pdf_analyzer = PDFAnalyzer()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        layout_info = pdf_analyzer.analyze_page_layout(pdf_path, page_number)
        
        if not layout_info:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        coordinate_info = layout_info.get("coordinate_info", {})
        
        print("\n" + "="*60)
        print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–û–†–î–ò–ù–ê–¢–ê–• –°–¢–†–ê–ù–ò–¶–´")
        print("="*60)
        
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}")
        print(f"üìè –†–∞–∑–º–µ—Ä—ã: {layout_info['page_width']:.1f} x {layout_info['page_height']:.1f} pt")
        print(f"üîÑ –ü–æ–≤–æ—Ä–æ—Ç: {layout_info['rotation']}¬∞")
        print(f"üìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {'–ê–ª—å–±–æ–º–Ω–∞—è' if layout_info['is_landscape'] else '–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è'}")
        print(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–π –±–æ–∫—Å: {coordinate_info.get('active_box_type', 'N/A')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MediaBox
        mediabox = coordinate_info.get("mediabox", {})
        print(f"\nüì¶ MediaBox:")
        print(f"   –†–∞–∑–º–µ—Ä—ã: {mediabox.get('width', 0):.1f} x {mediabox.get('height', 0):.1f} pt")
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({mediabox.get('x0', 0):.1f}, {mediabox.get('y0', 0):.1f}) - ({mediabox.get('x1', 0):.1f}, {mediabox.get('y1', 0):.1f})")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CropBox (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cropbox = coordinate_info.get("cropbox")
        if cropbox:
            print(f"\n‚úÇÔ∏è CropBox:")
            print(f"   –†–∞–∑–º–µ—Ä—ã: {cropbox.get('width', 0):.1f} x {cropbox.get('height', 0):.1f} pt")
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({cropbox.get('x0', 0):.1f}, {cropbox.get('y0', 0):.1f}) - ({cropbox.get('x1', 0):.1f}, {cropbox.get('y1', 0):.1f})")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = coordinate_info.get("config", {})
        print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   –ë–æ–∫—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {config.get('position_box', 'N/A')}")
        print(f"   –£—á–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞: {config.get('respect_rotation', 'N/A')}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é QR –∫–æ–¥–∞
        page_box = {
            "width": layout_info["page_width"],
            "height": layout_info["page_height"]
        }
        
        qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
        
        x, y = pdf_analyzer.compute_qr_anchor(
            page_box=page_box,
            qr_size=qr_size,
            rotation=layout_info["rotation"]
        )
        
        print(f"\nüéØ –ü–û–ó–ò–¶–ò–Ø QR –ö–û–î–ê")
        print("="*60)
        print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x:.1f}, {y:.1f}) pt")
        print(f"üìè –í —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö: ({x/28.35:.2f}, {y/28.35:.2f}) —Å–º")
        print(f"üîß –Ø–∫–æ—Ä—å: {settings.QR_ANCHOR}")
        print(f"üìè –û—Ç—Å—Ç—É–ø: {settings.QR_MARGIN_PT} pt")
        print(f"üîÑ –£—á–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞: {settings.QR_RESPECT_ROTATION}")
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º debug —Ä–∞–º–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if settings.QR_DEBUG_FRAME:
            debug_file = pdf_analyzer._draw_debug_frame(pdf_path, page_number, x, y, qr_size, qr_size)
            if debug_file:
                print(f"üé® Debug —Ä–∞–º–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {debug_file}")
        
        print("="*60)
        
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PDF", error=str(e))
        return False

def test_coordinates(pdf_path: str, **kwargs):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π –∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤"""
    
    if not os.path.exists(pdf_path):
        logger.error("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", pdf_path=pdf_path)
        return False
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", pdf_path=pdf_path)
    
    pdf_analyzer = PDFAnalyzer()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        layout_info = pdf_analyzer.analyze_page_layout(pdf_path, 0)
        
        if not layout_info:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        
        page_box = {
            "width": layout_info["page_width"],
            "height": layout_info["page_height"]
        }
        
        qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
        rotation = layout_info["rotation"]
        
        print("\n" + "="*80)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ö–û–û–†–î–ò–ù–ê–¢")
        print("="*80)
        print(f"üìÑ –§–∞–π–ª: {os.path.basename(pdf_path)}")
        print(f"üìè –†–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_box['width']:.1f} x {page_box['height']:.1f} pt")
        print(f"üîÑ –ü–æ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {rotation}¬∞")
        print(f"üìè –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞: {qr_size:.1f} pt ({qr_size/28.35:.1f} —Å–º)")
        print("="*80)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∫–æ—Ä—è
        anchors = ["bottom-right", "bottom-left", "top-right", "top-left"]
        
        print(f"{'–Ø–∫–æ—Ä—å':<15} {'X (pt)':<10} {'Y (pt)':<10} {'X (—Å–º)':<10} {'Y (—Å–º)':<10}")
        print("-" * 80)
        
        for anchor in anchors:
            x, y = pdf_analyzer.compute_qr_anchor(
                page_box=page_box,
                qr_size=qr_size,
                anchor=anchor,
                rotation=rotation
            )
            
            print(f"{anchor:<15} {x:<10.1f} {y:<10.1f} {x/28.35:<10.2f} {y/28.35:<10.2f}")
        
        print("="*80)
        
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", error=str(e))
        return False

def show_config(**kwargs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    print("\n" + "="*60)
    print("‚öôÔ∏è –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø QR –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    print(f"üéØ –Ø–∫–æ—Ä—å: {settings.QR_ANCHOR}")
    print(f"üìè –û—Ç—Å—Ç—É–ø: {settings.QR_MARGIN_PT} pt ({settings.QR_MARGIN_PT/28.35:.2f} —Å–º)")
    print(f"üì¶ –ë–æ–∫—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {settings.QR_POSITION_BOX}")
    print(f"üîÑ –£—á–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞: {settings.QR_RESPECT_ROTATION}")
    print(f"üé® Debug —Ä–∞–º–∫–∞: {settings.QR_DEBUG_FRAME}")
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∫–æ—Ä—è:")
    print("   - bottom-right: –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª")
    print("   - bottom-left: –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª")
    print("   - top-right: –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª")
    print("   - top-left: –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª")
    
    print("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–∫—Å—ã:")
    print("   - media: MediaBox (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("   - crop: CropBox (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print("="*60)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    parser = argparse.ArgumentParser(
        description="CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QR –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  python qr_positioning_cli.py --show-config

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF —Ñ–∞–π–ª
  python qr_positioning_cli.py --analyze /path/to/file.pdf

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  python qr_positioning_cli.py --analyze /path/to/file.pdf --page 2

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  python qr_positioning_cli.py --test-coordinates /path/to/file.pdf

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —è–∫–æ—Ä—è
  python qr_positioning_cli.py --analyze /path/to/file.pdf --anchor bottom-left

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ—Ç—Å—Ç—É–ø–∞
  python qr_positioning_cli.py --analyze /path/to/file.pdf --margin-pt 20

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º —É—á–µ—Ç–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
  python qr_positioning_cli.py --analyze /path/to/file.pdf --no-rotation

  # –í–∫–ª—é—á–∏—Ç—å debug —Ä–∞–º–∫—É
  python qr_positioning_cli.py --analyze /path/to/file.pdf --debug-frame
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--show-config', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    parser.add_argument('--analyze', type=str, metavar='PDF_FILE',
                       help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF —Ñ–∞–π–ª')
    parser.add_argument('--test-coordinates', type=str, metavar='PDF_FILE',
                       help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    parser.add_argument('--page', type=int, default=0,
                       help='–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    parser.add_argument('--anchor', type=str, 
                       choices=['bottom-right', 'bottom-left', 'top-right', 'top-left'],
                       help='–Ø–∫–æ—Ä—å –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞')
    parser.add_argument('--margin-pt', type=float,
                       help='–û—Ç—Å—Ç—É–ø –≤ —Ç–æ—á–∫–∞—Ö')
    parser.add_argument('--position-box', type=str,
                       choices=['media', 'crop'],
                       help='–ë–æ–∫—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (media –∏–ª–∏ crop)')
    parser.add_argument('--respect-rotation', action='store_true',
                       help='–£—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    parser.add_argument('--no-rotation', action='store_true',
                       help='–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    parser.add_argument('--debug-frame', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É debug —Ä–∞–º–∫–∏')
    
    args = parser.parse_args()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.anchor:
        settings.QR_ANCHOR = args.anchor
    if args.margin_pt:
        settings.QR_MARGIN_PT = args.margin_pt
    if args.position_box:
        settings.QR_POSITION_BOX = args.position_box
    if args.respect_rotation:
        settings.QR_RESPECT_ROTATION = True
    if args.no_rotation:
        settings.QR_RESPECT_ROTATION = False
    if args.debug_frame:
        settings.QR_DEBUG_FRAME = True
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    success = True
    
    if args.show_config:
        success &= show_config()
    
    if args.analyze:
        success &= analyze_pdf(args.analyze, args.page)
    
    if args.test_coordinates:
        success &= test_coordinates(args.test_coordinates)
    
    if not any([args.show_config, args.analyze, args.test_coordinates]):
        parser.print_help()
        return 1
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
