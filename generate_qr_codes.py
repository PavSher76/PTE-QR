#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 10 QR-–∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API PTE-QR
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã –≤ –ø–∞–ø–∫—É test_results
"""

import base64
import json
import os
import time
from datetime import datetime
from typing import Any, Dict, List

import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000/api/v1"
LOGIN_ENDPOINT = f"{API_BASE_URL}/auth/login"
QR_GENERATE_ENDPOINT = f"{API_BASE_URL}/qrcodes/"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
TEST_USER = {"username": "test_user", "password": "test_password"}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
TEST_DOCUMENT = {
    "doc_uid": "TEST-DOC-001",
    "revision": "A",
    "pages": list(range(1, 11)),  # –°—Ç—Ä–∞–Ω–∏—Ü—ã 1-10
    "style": "BLACK",
    "dpi": 300,
}

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
OUTPUT_DIR = "test_results/qr_codes"
RESULTS_FILE = "test_results/qr_generation_results.json"


class QRCodeGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API"""

    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = requests.Session()
        self.token = None

    def login(self, username: str, password: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print(f"üîê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            response = self.session.post(
                LOGIN_ENDPOINT,
                json={"username": username, "password": password},
                headers={"Content-Type": "application/json"},
            )

            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def generate_qr_codes(
        self,
        doc_uid: str,
        revision: str,
        pages: List[int],
        style: str = "BLACK",
        dpi: int = 300,
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            if not self.token:
                raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

            print(f"üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_uid}, —Ä–µ–≤–∏–∑–∏—è {revision}")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã: {pages}")

            headers = {
                "Authorization": f"Bearer {self.token}",
                "Content-Type": "application/json",
            }

            payload = {
                "doc_uid": doc_uid,
                "revision": revision,
                "pages": pages,
                "style": style,
                "dpi": dpi,
                "mode": "qr-only",
            }

            response = self.session.post(
                QR_GENERATE_ENDPOINT, json=payload, headers=headers
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data.get('items', []))} QR-–∫–æ–¥–æ–≤")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return {}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤: {e}")
            return {}

    def save_qr_codes(self, qr_data: Dict[str, Any], output_dir: str) -> List[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
        saved_files = []

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(output_dir, exist_ok=True)

            items = qr_data.get("items", [])
            doc_uid = qr_data.get("doc_uid", "unknown")
            revision = qr_data.get("revision", "unknown")

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –≤ –ø–∞–ø–∫—É: {output_dir}")

            for item in items:
                page = item.get("page")
                format_type = item.get("format")
                data_base64 = item.get("data_base64")
                url = item.get("url")

                if not data_base64:
                    continue

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ
                try:
                    image_data = base64.b64decode(data_base64)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64 –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = (
                    f"{doc_uid}_rev{revision}_page{page:02d}.{format_type.lower()}"
                )
                filepath = os.path.join(output_dir, filename)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(filepath, "wb") as f:
                    f.write(image_data)

                saved_files.append(filepath)
                print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

            return saved_files

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–æ–≤: {e}")
            return saved_files

    def save_results_metadata(
        self, qr_data: Dict[str, Any], saved_files: List[str], output_file: str
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤"""
        try:
            metadata = {
                "generation_time": datetime.now().isoformat(),
                "document": {
                    "doc_uid": qr_data.get("doc_uid"),
                    "revision": qr_data.get("revision"),
                    "mode": qr_data.get("mode"),
                },
                "generated_items": len(qr_data.get("items", [])),
                "saved_files": len(saved_files),
                "files": saved_files,
                "api_response": qr_data,
            }

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(output_file), exist_ok=True)

            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)

            print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤
    generator = QRCodeGenerator(API_BASE_URL)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not generator.login(TEST_USER["username"], TEST_USER["password"]):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    print()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤
    qr_data = generator.generate_qr_codes(
        doc_uid=TEST_DOCUMENT["doc_uid"],
        revision=TEST_DOCUMENT["revision"],
        pages=TEST_DOCUMENT["pages"],
        style=TEST_DOCUMENT["style"],
        dpi=TEST_DOCUMENT["dpi"],
    )

    if not qr_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    print()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–æ–≤
    saved_files = generator.save_qr_codes(qr_data, OUTPUT_DIR)

    if saved_files:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_files)} —Ñ–∞–π–ª–æ–≤ QR-–∫–æ–¥–æ–≤")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥—ã")
        return

    print()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    generator.save_results_metadata(qr_data, saved_files, RESULTS_FILE)

    print()
    print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ QR-–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {OUTPUT_DIR}")
    print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {RESULTS_FILE}")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    items = qr_data.get("items", [])
    png_count = len([item for item in items if item.get("format") == "PNG"])
    svg_count = len([item for item in items if item.get("format") == "SVG"])

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
    print(f"  ‚Ä¢ PNG —Ñ–∞–π–ª–æ–≤: {png_count}")
    print(f"  ‚Ä¢ SVG —Ñ–∞–π–ª–æ–≤: {svg_count}")
    print(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(saved_files)}")


if __name__ == "__main__":
    main()
