#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
"""

import asyncio
import json
import tempfile
from pathlib import Path

import httpx
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def create_test_pdf():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª"""
    temp_file = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
    
    c = canvas.Canvas(temp_file.name, pagesize=A4)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    c.drawString(100, 750, "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è")
    c.drawString(100, 700, "–î–æ–∫—É–º–µ–Ω—Ç ID: TEST-NORMO-001")
    c.drawString(100, 650, "–†–µ–≤–∏–∑–∏—è: 1")
    c.drawString(100, 600, "–î–∞—Ç–∞: 2024-09-25")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞–¥–ø–∏—Å—å (—à—Ç–∞–º–ø)
    c.rect(400, 50, 150, 80)  # –†–∞–º–∫–∞ —à—Ç–∞–º–ø–∞
    c.drawString(410, 110, "–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å")
    c.drawString(410, 90, "–î–æ–∫—É–º–µ–Ω—Ç: TEST-001")
    c.drawString(410, 70, "–†–µ–≤–∏–∑–∏—è: 1")
    
    c.showPage()
    c.save()
    
    return temp_file.name

async def test_normocontrol_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è"""
    
    base_url = "http://localhost:8000/api/v1"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    test_pdf_path = create_test_pdf()
    
    try:
        async with httpx.AsyncClient() as client:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è...")
            
            # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è...")
            try:
                response = await client.get(f"{base_url}/normocontrol/requirements")
                if response.status_code == 200:
                    requirements = response.json()
                    print(f"‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(requirements['requirements'])} –ø—É–Ω–∫—Ç–æ–≤")
                    for i, req in enumerate(requirements['requirements'][:3], 1):
                        print(f"   {i}. {req}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
            
            # 2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
            print("\n2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            try:
                with open(test_pdf_path, 'rb') as f:
                    files = {'file': ('test_document.pdf', f, 'application/pdf')}
                    response = await client.post(f"{base_url}/normocontrol/validate", files=files)
                
                if response.status_code == 200:
                    validation = response.json()
                    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
                    print(f"   - –°—Ç—Ä–∞–Ω–∏—Ü: {validation['pages_count']}")
                    print(f"   - –§–æ—Ä–º–∞—Ç: {validation['format']}")
                    print(f"   - –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {validation['orientation']}")
                    print(f"   - –ï—Å—Ç—å —à—Ç–∞–º–ø: {validation['has_stamp']}")
                    print(f"   - –ï—Å—Ç—å —Ä–∞–º–∫–∞: {validation['has_frame']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            
            # 3. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
            print("\n3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è...")
            try:
                with open(test_pdf_path, 'rb') as f:
                    files = {'file': ('test_document.pdf', f, 'application/pdf')}
                    data = {
                        'enovia_id': 'TEST-NORMO-001',
                        'revision': '1',
                        'control_type': 'full'
                    }
                    response = await client.post(f"{base_url}/normocontrol/upload", files=files, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    if result['success']:
                        control_result = result['result']
                        print(f"‚úÖ –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω:")
                        print(f"   - –°—Ç–∞—Ç—É—Å: {control_result['status'].upper()}")
                        print(f"   - –û—Ü–µ–Ω–∫–∞: {control_result['score']}/100")
                        print(f"   - QR-–∫–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {control_result['qr_codes_added']}")
                        print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {control_result['processing_time']}—Å")
                        print(f"   - –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(control_result['issues'])}")
                        print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(control_result['recommendations'])}")
                        
                        if control_result['issues']:
                            print("   –ü—Ä–æ–±–ª–µ–º—ã:")
                            for issue in control_result['issues']:
                                print(f"     - {issue['code']}: {issue['description']} ({issue['severity']})")
                        
                        if control_result['recommendations']:
                            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                            for rec in control_result['recommendations']:
                                print(f"     - {rec}")
                    else:
                        print(f"‚ùå –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ —É–¥–∞–ª—Å—è: {result['message']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            
            # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è...")
            try:
                response = await client.get(f"{base_url}/normocontrol/history?limit=3")
                if response.status_code == 200:
                    history = response.json()
                    print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(history['history'])} –∑–∞–ø–∏—Å–µ–π")
                    for i, record in enumerate(history['history'], 1):
                        print(f"   {i}. {record['document_id']} - {record['status']} ({record['score']}/100)")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
            # 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            print("\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è...")
            try:
                response = await client.get(f"{base_url}/normocontrol/status/test-control-id-123")
                if response.status_code == 200:
                    status = response.json()
                    if status['success']:
                        result = status['result']
                        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
                        print(f"   - ID –∫–æ–Ω—Ç—Ä–æ–ª—è: {result['control_id']}")
                        print(f"   - –°—Ç–∞—Ç—É—Å: {result['status']}")
                        print(f"   - –û—Ü–µ–Ω–∫–∞: {result['score']}/100")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['message']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        Path(test_pdf_path).unlink(missing_ok=True)

async def test_api_documentation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"""
    print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API...")
    
    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAPI —Å—Ö–µ–º—É
            response = await client.get("http://localhost:8000/openapi.json")
            if response.status_code == 200:
                openapi_schema = response.json()
                normocontrol_paths = [path for path in openapi_schema['paths'] if '/normocontrol' in path]
                print(f"‚úÖ OpenAPI —Å—Ö–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                print(f"   –ù–∞–π–¥–µ–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è: {len(normocontrol_paths)}")
                for path in normocontrol_paths:
                    print(f"     - {path}")
            else:
                print(f"‚ùå OpenAPI —Å—Ö–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Swagger UI
            response = await client.get("http://localhost:8000/docs")
            if response.status_code == 200:
                print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8000/docs")
            else:
                print(f"‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_normocontrol_api())
    asyncio.run(test_api_documentation())
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/docs")
    print("\nüîó –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è:")
    print("   POST /api/v1/normocontrol/upload - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    print("   GET  /api/v1/normocontrol/requirements - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    print("   GET  /api/v1/normocontrol/status/{id} - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª—è")
    print("   GET  /api/v1/normocontrol/history - –ò—Å—Ç–æ—Ä–∏—è")
    print("   POST /api/v1/normocontrol/validate - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")