#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ –≤ PDF
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ QR –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ –ø—Ä–∏ anchor=bottom-right
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')

from app.services.pdf_service import PDFService
from app.core.config import settings
import structlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

def create_test_pdf_with_frame():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å —Ä–∞–º–∫–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.units import cm
    
    # –°–æ–∑–¥–∞–µ–º PDF —Å —Ä–∞–º–∫–æ–π
    packet = BytesIO()
    c = canvas.Canvas(packet, pagesize=A4)
    width, height = A4
    
    # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
    c.setStrokeColor('black')
    c.setLineWidth(2)
    c.rect(1*cm, 1*cm, width-2*cm, height-2*cm)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    c.setFont('Helvetica-Bold', 16)
    c.drawString(3*cm, height-3*cm, "QR Positioning Test")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
    c.setFont('Helvetica', 12)
    c.drawString(3*cm, height-4*cm, f"Page size: {width:.1f} x {height:.1f} pt")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è QR –∫–æ–¥–∞
    qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
    margin = 12.0
    
    expected_x = width - qr_size - margin
    expected_y = margin
    
    c.setStrokeColor('red')
    c.setLineWidth(1)
    c.setDash([5, 5])  # –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
    c.rect(expected_x, expected_y, qr_size, qr_size)
    
    # –ü–æ–¥–ø–∏—Å—å
    c.setFillColor('red')
    c.setFont('Helvetica-Bold', 10)
    c.drawString(expected_x, expected_y + qr_size + 0.2*cm, "Expected QR Position")
    
    c.save()
    packet.seek(0)
    
    return packet.getvalue()

def test_qr_positioning_accuracy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞"""
    
    logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞")
    
    # –°–æ–∑–¥–∞–µ–º PDFService
    pdf_service = PDFService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    test_pdf_content = create_test_pdf_with_frame()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PDF –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    with open('/app/tmp/original_test.pdf', 'wb') as f:
        f.write(test_pdf_content)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º anchor=bottom-right
    original_anchor = settings.QR_ANCHOR
    settings.QR_ANCHOR = "bottom-right"
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Å QR –∫–æ–¥–æ–º
        result_pdf = pdf_service.add_qr_codes_to_pdf(
            pdf_content=test_pdf_content,
            qr_data="test_qr_positioning_data"
        )
        
        if result_pdf is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('/app/tmp/result_with_qr.pdf', 'wb') as f:
            f.write(result_pdf)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from PyPDF2 import PdfReader
        from io import BytesIO
        
        pdf_reader = PdfReader(BytesIO(result_pdf))
        page = pdf_reader.pages[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_width = float(page.mediabox.width)
        page_height = float(page.mediabox.height)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        qr_size = 99.225  # 3.5 —Å–º –≤ —Ç–æ—á–∫–∞—Ö
        margin = settings.QR_MARGIN_PT
        
        expected_x = page_width - qr_size - margin
        expected_y = margin
        
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"   –†–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_width} x {page_height} pt")
        logger.info(f"   –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞: {qr_size} pt ({qr_size/28.35:.1f} —Å–º)")
        logger.info(f"   –û—Ç—Å—Ç—É–ø: {margin} pt ({margin/28.35:.2f} —Å–º)")
        logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({expected_x:.1f}, {expected_y:.1f}) pt")
        logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({expected_x/28.35:.2f}, {expected_y/28.35:.2f}) —Å–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç QR –∫–æ–¥ (—Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–ª—Å—è)
        size_increase = len(result_pdf) - len(test_pdf_content)
        logger.info(f"   –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ PDF: {size_increase} –±–∞–π—Ç")
        
        if size_increase > 0:
            logger.info("‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PDF")
        else:
            logger.warning("‚ö†Ô∏è –†–∞–∑–º–µ—Ä PDF –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ QR –∫–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        tolerance = 1.0  # ¬±1 pt –¥–æ–ø—É—Å–∫
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –º—ã –±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç QR –∫–æ–¥–∞
        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±{tolerance} pt")
        
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", error=str(e))
        return False
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        settings.QR_ANCHOR = original_anchor

def test_different_anchors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —è–∫–æ—Ä—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    pdf_service = PDFService()
    test_pdf_content = create_test_pdf_with_frame()
    
    anchors = ["bottom-right", "bottom-left", "top-right", "top-left"]
    results = []
    
    for anchor in anchors:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∫–æ—Ä—è: {anchor}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å
        original_anchor = settings.QR_ANCHOR
        settings.QR_ANCHOR = anchor
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
            result_pdf = pdf_service.add_qr_codes_to_pdf(
                pdf_content=test_pdf_content,
                qr_data=f"test_qr_data_{anchor}"
            )
            
            if result_pdf is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                filename = f'/app/tmp/result_{anchor.replace("-", "_")}.pdf'
                with open(filename, 'wb') as f:
                    f.write(result_pdf)
                
                results.append({
                    "anchor": anchor,
                    "status": "success",
                    "filename": filename
                })
                
                logger.info(f"‚úÖ {anchor}: PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}")
            else:
                results.append({
                    "anchor": anchor,
                    "status": "failed",
                    "error": "PDF processing failed"
                })
                
                logger.error(f"‚ùå {anchor}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF")
                
        except Exception as e:
            results.append({
                "anchor": anchor,
                "status": "error",
                "error": str(e)
            })
            
            logger.error(f"‚ùå {anchor}: –æ—à–∏–±–∫–∞", error=str(e))
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            settings.QR_ANCHOR = original_anchor
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = '/app/tmp/anchor_test_results.json'
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∫–æ—Ä–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.makedirs('/app/tmp', exist_ok=True)
    
    success = True
    
    # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    success &= test_qr_positioning_accuracy()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —è–∫–æ—Ä–µ–π
    anchor_results = test_different_anchors()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_anchors = [r for r in anchor_results if r["status"] == "success"]
    failed_anchors = [r for r in anchor_results if r["status"] != "success"]
    
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö —è–∫–æ—Ä–µ–π: {len(successful_anchors)}/{len(anchor_results)}")
    logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —è–∫–æ—Ä–µ–π: {len(failed_anchors)}")
    
    if failed_anchors:
        logger.error("‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —è–∫–æ—Ä—è:")
        for result in failed_anchors:
            logger.error(f"   - {result['anchor']}: {result.get('error', 'Unknown error')}")
    
    if success and len(successful_anchors) == len(anchor_results):
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
