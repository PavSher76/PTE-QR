services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pte-qr-postgres
    environment:
      POSTGRES_DB: pte_qr
      POSTGRES_USER: pte_qr
      POSTGRES_PASSWORD: pte_qr_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pte_qr -d pte_qr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - pte-qr-network

  # Redis Cache
  redis:
    image: redis:latest
    container_name: pte-qr-redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - pte-qr-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pte-qr-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://pte_qr:pte_qr_dev@postgres:5432/pte_qr
      - REDIS_URL=redis://:redis_password@redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENOVIA_BASE_URL=https://your-enovia-instance.com
      - ENOVIA_CLIENT_ID=your-client-id
      - ENOVIA_CLIENT_SECRET=your-client-secret
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
      - backend_tmp:/app/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - pte-qr-network

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: pte-qr-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - backend
    volumes:
      - frontend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - pte-qr-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pte-qr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pte-qr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_tmp:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  pte-qr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
