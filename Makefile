# PTE-QR System Makefile
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

.PHONY: help build up down restart logs clean init-db test-db backup-db restore-db

# Default target
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "PTE-QR System Management"
	@echo "========================"
	@echo ""
	@echo "Available commands:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Docker commands
build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã
	@echo "üî® Building Docker images..."
	docker-compose build

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üöÄ Starting services..."
	docker-compose up -d

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üõë Stopping services..."
	docker-compose down

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üîÑ Restarting services..."
	docker-compose restart

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìã Showing logs..."
	docker-compose logs -f

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend
	@echo "üìã Backend logs..."
	docker-compose logs -f backend

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend
	@echo "üìã Frontend logs..."
	docker-compose logs -f frontend

logs-db: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "üìã Database logs..."
	docker-compose logs -f postgres

# Database commands
init-db: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	@echo "üóÑÔ∏è Initializing database..."
	@if [ -f backend/init-scripts/init_database.sh ]; then \
		cd backend/init-scripts && ./init_database.sh; \
	else \
		echo "‚ùå Database initialization script not found"; \
		exit 1; \
	fi

test-db: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "üß™ Testing database connection..."
	@docker exec pte-qr-postgres psql -U postgres -d pte_qr -c "SELECT 'Database connection successful' as status;"

backup-db: ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "üíæ Creating database backup..."
	@mkdir -p backups
	@docker exec pte-qr-postgres pg_dump -U postgres pte_qr > backups/pte_qr_backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup created in backups/ directory"

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "üì• Restoring database from backup..."
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "‚ùå Please specify BACKUP_FILE=path/to/backup.sql"; \
		exit 1; \
	fi
	@docker exec -i pte-qr-postgres psql -U postgres pte_qr < $(BACKUP_FILE)
	@echo "‚úÖ Database restored from $(BACKUP_FILE)"

# Development commands
dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üõ†Ô∏è Starting development environment..."
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

dev-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üìã Development logs..."
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs -f

# Testing commands
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "üß™ Running tests..."
	@echo "Backend tests..."
	@docker exec pte-qr-backend pytest
	@echo "Frontend tests..."
	@docker exec pte-qr-frontend npm test

test-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã backend
	@echo "üß™ Running backend tests..."
	@docker exec pte-qr-backend pytest

test-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã frontend
	@echo "üß™ Running frontend tests..."
	@docker exec pte-qr-frontend npm test

# Cleanup commands
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã
	@echo "üßπ Cleaning up..."
	docker-compose down -v
	docker system prune -f

clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–∑—ã)
	@echo "üßπ Full cleanup..."
	docker-compose down -v --rmi all
	docker system prune -af

# Status commands
status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìä Service status..."
	docker-compose ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üè• Health check..."
	@echo "Backend health:"
	@curl -s http://localhost:8000/health | jq . || echo "Backend not responding"
	@echo "Frontend health:"
	@curl -s -I http://localhost:80 | head -1 || echo "Frontend not responding"

# Database management
db-shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "üóÑÔ∏è Connecting to database..."
	docker exec -it pte-qr-postgres psql -U postgres -d pte_qr

db-reset: ## –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	@echo "‚ö†Ô∏è Resetting database..."
	@read -p "Are you sure? This will delete all data! (y/N): " confirm && [ "$$confirm" = "y" ]
	docker exec pte-qr-postgres psql -U postgres -c "DROP DATABASE IF EXISTS pte_qr;"
	docker exec pte-qr-postgres psql -U postgres -c "CREATE DATABASE pte_qr;"
	$(MAKE) init-db

# Monitoring commands
monitor: ## –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "üìä Resource monitoring..."
	@echo "Docker stats:"
	@docker stats --no-stream
	@echo ""
	@echo "Disk usage:"
	@docker system df

# Setup commands
setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
	@echo "‚öôÔ∏è Setting up PTE-QR system..."
	$(MAKE) build
	$(MAKE) up
	@echo "‚è≥ Waiting for services to start..."
	@sleep 30
	$(MAKE) init-db
	@echo "‚úÖ Setup completed!"
	@echo "üåê Frontend: http://localhost:80"
	@echo "üîß Backend API: http://localhost:8000"
	@echo "üìö API Docs: http://localhost:8000/docs"

# Production commands
prod-build: ## –°–æ–±—Ä–∞—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "üè≠ Building for production..."
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml build

prod-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
	@echo "üöÄ Starting production environment..."
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# Utility commands
update: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "üì¶ Updating dependencies..."
	@echo "Backend dependencies..."
	@docker exec pte-qr-backend pip install --upgrade -r requirements.txt
	@echo "Frontend dependencies..."
	@docker exec pte-qr-frontend npm update

version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	@echo "üìã Component versions..."
	@echo "Docker Compose:"
	@docker-compose --version
	@echo "Docker:"
	@docker --version
	@echo "Backend Python:"
	@docker exec pte-qr-backend python --version
	@echo "Frontend Node:"
	@docker exec pte-qr-frontend node --version
